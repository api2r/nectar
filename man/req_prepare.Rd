% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/req_prepare.R
\name{req_prepare}
\alias{req_prepare}
\title{Prepare a request for an API}
\usage{
req_prepare(
  base_url,
  ...,
  path = NULL,
  query = NULL,
  body = NULL,
  mime_type = NULL,
  method = NULL,
  additional_user_agent = NULL,
  auth_fn = NULL,
  auth_args = list(),
  tidy_fn = NULL,
  tidy_args = list(),
  pagination_fn = NULL,
  call = rlang::caller_env()
)
}
\arguments{
\item{base_url}{(\verb{length-1 character}) The part of the url that is shared by
all calls to the API. In some cases there may be a family of base URLs,
from which you will need to choose one.}

\item{...}{These dots are for future extensions and must be empty.}

\item{path}{(\code{character} or \code{list}) The route to an API endpoint. Optionally,
a list or character vector with the path as one or more unnamed arguments
(which will be concatenated with "/") plus named arguments to
\code{\link[glue:glue]{glue::glue()}} into the path.}

\item{query}{(\code{character} or \code{list}) An optional list or character vector of
parameters to pass in the query portion of the request. Can also include a
\code{.multi} argument to pass to \code{\link[httr2:req_url]{httr2::req_url_query()}} to control how
elements containing multiple values are handled.}

\item{body}{(multiple types) An object to use as the body of the request. If
any component of the body is a path, pass it through \code{\link[fs:path]{fs::path()}} or
otherwise give it the class "fs_path" to indicate that it is a path.}

\item{mime_type}{(\verb{length-1 character}) The mime type of any files present in
the body. Some APIs allow you to leave this as NULL for them to guess.}

\item{method}{(\verb{length-1 character}, optional) If the method is something
other than \code{GET} or \code{POST}, supply it. Case is ignored.}

\item{additional_user_agent}{(\verb{length-1 character}) A string to identify
where a request is coming from. We automatically include information about
your package and nectar, but use this to provide additional details.
Default \code{NULL}.}

\item{auth_fn}{(\code{function}) A function to use to authenticate the request. By
default (\code{NULL}), no authentication is performed.}

\item{auth_args}{(\code{list}) An optional list of arguments to the \code{auth_fn}
function.}

\item{tidy_fn}{(\code{function}) A function that will be invoked by \code{\link[=resp_tidy]{resp_tidy()}}
to tidy the response.}

\item{tidy_args}{(\code{list}) A list of additional arguments to pass to
\code{tidy_fn}.}

\item{pagination_fn}{(\code{function}) A function that takes the previous response
(\code{resp}) to generate the next request in a call to
\code{\link[httr2:req_perform_iterative]{httr2::req_perform_iterative()}}. This function can usually be generated
using one of the iteration helpers described in
\code{\link[httr2:iterate_with_offset]{httr2::iterate_with_offset()}}. This function will be extracted from the
request by \code{\link[=req_perform_opinionated]{req_perform_opinionated()}} and passed on as \code{next_req} to
\code{\link[httr2:req_perform_iterative]{httr2::req_perform_iterative()}}.}

\item{call}{(\code{environment}) The environment from which a function was called,
e.g. \code{\link[rlang:stack]{rlang::caller_env()}} (the default). The environment will be mentioned
in error messages as the source of the error. This argument is particularly
useful for functions that are intended to be called as utilities inside
other functions.}
}
\value{
A \code{\link[httr2:request]{httr2::request()}} object with additional class \code{nectar_request}.
}
\description{
This function implements an opinionated framework for preparing an API
request. It is intended to be used inside an API client package. It serves as
a wrapper around the \code{req_} family of functions, such as \code{\link[httr2:request]{httr2::request()}}.
}
\seealso{
Other opinionated request functions: 
\code{\link{req_init}()},
\code{\link{req_modify}()},
\code{\link{req_pagination_policy}()},
\code{\link{req_tidy_policy}()}
}
\concept{opinionated request functions}
