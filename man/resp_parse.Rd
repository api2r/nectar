% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/resp_parse.R
\name{resp_parse}
\alias{resp_parse}
\alias{resp_parse.default}
\alias{resp_parse.httr2_response}
\title{Parse one or more responses}
\usage{
resp_parse(resps, ...)

\method{resp_parse}{default}(
  resps,
  ...,
  arg = rlang::caller_arg(resps),
  call = rlang::caller_env()
)

\method{resp_parse}{httr2_response}(resps, ..., response_parser = resp_tidy)
}
\arguments{
\item{resps}{(\code{httr2_response}, \code{nectar_responses}, or \code{list}) A single
\code{\link[httr2:response]{httr2::response()}} object (as returned by \code{\link[httr2:req_perform]{httr2::req_perform()}}) or a
list of such objects (as returned by \code{\link[=req_perform_opinionated]{req_perform_opinionated()}} or
\code{\link[httr2:req_perform_iterative]{httr2::req_perform_iterative()}}).}

\item{...}{Additional arguments passed on to the \code{response_parser} function
(in addition to \code{resps}).}

\item{arg}{(\verb{length-1 character}) An argument name as a string. This argument
will be mentioned in error messages as the input that is at the origin of a
problem.}

\item{call}{(\code{environment}) The environment from which a function was called,
e.g. \code{\link[rlang:stack]{rlang::caller_env()}} (the default). The environment will be mentioned
in error messages as the source of the error. This argument is particularly
useful for functions that are intended to be called as utilities inside
other functions.}

\item{response_parser}{(\code{function}) A function to parse the server response
(\code{resp}). Defaults to \code{\link[httr2:resp_body_raw]{httr2::resp_body_json()}}, since JSON responses are
common. Set this to \code{NULL} to return the raw response from
\code{\link[httr2:req_perform]{httr2::req_perform()}}.}
}
\value{
The response parsed by the \code{response_parser}. If \code{resps} was a list,
the parsed responses are concatenated when possible. Unlike
\link[httr2:resps_successes]{httr2::resps_data}, this function does not concatenate raw vector
responses.
}
\description{
\ifelse{html}{\href{https://lifecycle.r-lib.org/articles/stages.html#questioning}{\figure{lifecycle-questioning.svg}{options: alt='[Questioning]'}}}{\strong{[Questioning]}}

If you have implemented the full \code{nectar} framework, use \code{\link[=resp_tidy]{resp_tidy()}}
directly to parse your responses. We may continue to support
\code{resp_parse()}, but it is most useful as a bridge to the full framework.

\code{httr2} provides two methods for performing requests:
\code{\link[httr2:req_perform]{httr2::req_perform()}}, which returns a single \code{\link[httr2:response]{httr2::response()}} object,
and \code{\link[httr2:req_perform_iterative]{httr2::req_perform_iterative()}}, which returns a list of
\code{\link[httr2:response]{httr2::response()}} objects. This function automatically determines whether
a single response or multiple responses have been returned, and parses the
responses appropriately.
}
