% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/call_api.R
\name{call_api}
\alias{call_api}
\title{Send a request to an API}
\usage{
call_api(
  base_url,
  ...,
  path = NULL,
  query = NULL,
  body = NULL,
  mime_type = NULL,
  method = NULL,
  auth_fn = NULL,
  auth_args = list(),
  response_parser = resp_tidy,
  response_parser_args = list(),
  next_req = NULL,
  max_reqs = Inf,
  max_tries_per_req = 3,
  additional_user_agent = NULL
)
}
\arguments{
\item{base_url}{(\verb{length-1 character}) The part of the url that is shared by
all calls to the API. In some cases there may be a family of base URLs,
from which you will need to choose one.}

\item{...}{These dots are for future extensions and must be empty.}

\item{path}{(\code{character} or \code{list}) The route to an API endpoint. Optionally,
a list or character vector with the path as one or more unnamed arguments
(which will be concatenated with "/") plus named arguments to
\code{\link[glue:glue]{glue::glue()}} into the path.}

\item{query}{(\code{character} or \code{list}) An optional list or character vector of
parameters to pass in the query portion of the request. Can also include a
\code{.multi} argument to pass to \code{\link[httr2:req_url]{httr2::req_url_query()}} to control how
elements containing multiple values are handled.}

\item{body}{(multiple types) An object to use as the body of the request. If
any component of the body is a path, pass it through \code{\link[fs:path]{fs::path()}} or
otherwise give it the class "fs_path" to indicate that it is a path.}

\item{mime_type}{(\verb{length-1 character}) The mime type of any files present in
the body. Some APIs allow you to leave this as NULL for them to guess.}

\item{method}{(\verb{length-1 character}, optional) If the method is something
other than \code{GET} or \code{POST}, supply it. Case is ignored.}

\item{auth_fn}{(\code{function}) A function to use to authenticate the request. By
default (\code{NULL}), no authentication is performed.}

\item{auth_args}{(\code{list}) An optional list of arguments to the \code{auth_fn}
function.}

\item{response_parser}{(\code{function}) A function to parse the server response
(\code{resp}). Defaults to \code{\link[httr2:resp_body_raw]{httr2::resp_body_json()}}, since JSON responses are
common. Set this to \code{NULL} to return the raw response from
\code{\link[httr2:req_perform]{httr2::req_perform()}}.}

\item{response_parser_args}{(\code{list}) Additional arguments to pass to the
\code{response_parser}.}

\item{next_req}{An optional function that takes the previous response
(\code{resp}) to generate the next request in a call to
\code{\link[httr2:req_perform_iterative]{httr2::req_perform_iterative()}}. This function can usually be generated
using one of the iteration helpers described in
\code{\link[httr2:iterate_with_offset]{httr2::iterate_with_offset()}}. By default, \code{\link[=choose_pagination_fn]{choose_pagination_fn()}} is
used to check for a pagination policy (see \code{\link[=req_pagination_policy]{req_pagination_policy()}}),
and returns \code{NULL} if no such policy is defined.}

\item{max_reqs}{The maximum number of separate requests to perform. Passed to
the max_reqs argument of \code{\link[httr2:req_perform_iterative]{httr2::req_perform_iterative()}} when \code{next_req}
is supplied. You will mostly likely want to change the default value (\code{2})
to \code{Inf} after you validate that the request works.}

\item{max_tries_per_req}{The maximum number of times to attempt each
individual request. Passed to the \code{max_tries} argument of
\code{\link[httr2:req_retry]{httr2::req_retry()}}.}

\item{additional_user_agent}{(\verb{length-1 character}) A string to identify
where a request is coming from. We automatically include information about
your package and nectar, but use this to provide additional details.
Default \code{NULL}.}
}
\value{
The response from the API, parsed by the \code{response_parser}.
}
\description{
\ifelse{html}{\href{https://lifecycle.r-lib.org/articles/stages.html#questioning}{\figure{lifecycle-questioning.svg}{options: alt='[Questioning]'}}}{\strong{[Questioning]}}

This function implements an opinionated framework for making API calls. It
is intended to be used inside an API client package. It serves as a wrapper
around the \code{req_} family of functions, such as \code{\link[httr2:request]{httr2::request()}}, as well
as \code{\link[httr2:req_perform]{httr2::req_perform()}} and \code{\link[httr2:req_perform_iterative]{httr2::req_perform_iterative()}}, and, by
default, \code{\link[httr2:resp_body_raw]{httr2::resp_body_json()}}.
}
\seealso{
\code{\link[=req_prepare]{req_prepare()}}, \code{\link[=req_perform_opinionated]{req_perform_opinionated()}}, and \code{\link[=resp_parse]{resp_parse()}} for
finer control of the process.
}
