% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/req_tidy_policy.R
\name{req_tidy_policy}
\alias{req_tidy_policy}
\title{Define a tidy policy for a request}
\usage{
req_tidy_policy(
  req,
  tidy_fn = resp_body_auto,
  tidy_args = list(),
  call = rlang::caller_env()
)
}
\arguments{
\item{req}{(\code{httr2_request}) A \code{\link[httr2:request]{httr2::request()}} object.}

\item{tidy_fn}{A function that will be invoked by \code{\link[=resp_tidy]{resp_tidy()}} to tidy the
response.}

\item{tidy_args}{A list of additional arguments to pass to \code{tidy_fn}.}

\item{call}{(\code{environment}) The environment from which a function was called,
e.g. \code{\link[rlang:stack]{rlang::caller_env()}} (the default). The environment will be mentioned
in error messages as the source of the error. This argument is particularly
useful for functions that are intended to be called as utilities inside
other functions.}
}
\value{
A \code{\link[httr2:request]{httr2::request()}} object.
}
\description{
API responses generally follow a structured format. Use this function to
define a policy that will be used by \code{\link[=resp_tidy]{resp_tidy()}} to extract the relevant
portion of a response and wrangle it into a desired format.
}
\examples{
req <- httr2::request("https://example.com")
req_tidy_policy(req, httr2::resp_body_json, list(simplifyVector = TRUE))
}
