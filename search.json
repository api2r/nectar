[{"path":[]},{"path":"https://nectar.api2r.org/CODE_OF_CONDUCT.html","id":"our-pledge","dir":"","previous_headings":"","what":"Our Pledge","title":"Contributor Covenant Code of Conduct","text":"members, contributors, leaders pledge make participation community harassment-free experience everyone, regardless age, body size, visible invisible disability, ethnicity, sex characteristics, gender identity expression, level experience, education, socio-economic status, nationality, personal appearance, race, caste, color, religion, sexual identity orientation. pledge act interact ways contribute open, welcoming, diverse, inclusive, healthy community.","code":""},{"path":"https://nectar.api2r.org/CODE_OF_CONDUCT.html","id":"our-standards","dir":"","previous_headings":"","what":"Our Standards","title":"Contributor Covenant Code of Conduct","text":"Examples behavior contributes positive environment community include: Demonstrating empathy kindness toward people respectful differing opinions, viewpoints, experiences Giving gracefully accepting constructive feedback Accepting responsibility apologizing affected mistakes, learning experience Focusing best just us individuals, overall community Examples unacceptable behavior include: use sexualized language imagery, sexual attention advances kind Trolling, insulting derogatory comments, personal political attacks Public private harassment Publishing others’ private information, physical email address, without explicit permission conduct reasonably considered inappropriate professional setting","code":""},{"path":"https://nectar.api2r.org/CODE_OF_CONDUCT.html","id":"enforcement-responsibilities","dir":"","previous_headings":"","what":"Enforcement Responsibilities","title":"Contributor Covenant Code of Conduct","text":"Community leaders responsible clarifying enforcing standards acceptable behavior take appropriate fair corrective action response behavior deem inappropriate, threatening, offensive, harmful. Community leaders right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct, communicate reasons moderation decisions appropriate.","code":""},{"path":"https://nectar.api2r.org/CODE_OF_CONDUCT.html","id":"scope","dir":"","previous_headings":"","what":"Scope","title":"Contributor Covenant Code of Conduct","text":"Code Conduct applies within community spaces, also applies individual officially representing community public spaces. Examples representing community include using official e-mail address, posting via official social media account, acting appointed representative online offline event.","code":""},{"path":"https://nectar.api2r.org/CODE_OF_CONDUCT.html","id":"enforcement","dir":"","previous_headings":"","what":"Enforcement","title":"Contributor Covenant Code of Conduct","text":"Instances abusive, harassing, otherwise unacceptable behavior may reported community leaders responsible enforcement jonthegeek@gmail.com. complaints reviewed investigated promptly fairly. community leaders obligated respect privacy security reporter incident.","code":""},{"path":"https://nectar.api2r.org/CODE_OF_CONDUCT.html","id":"enforcement-guidelines","dir":"","previous_headings":"","what":"Enforcement Guidelines","title":"Contributor Covenant Code of Conduct","text":"Community leaders follow Community Impact Guidelines determining consequences action deem violation Code Conduct:","code":""},{"path":"https://nectar.api2r.org/CODE_OF_CONDUCT.html","id":"id_1-correction","dir":"","previous_headings":"Enforcement Guidelines","what":"1. Correction","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Use inappropriate language behavior deemed unprofessional unwelcome community. Consequence: private, written warning community leaders, providing clarity around nature violation explanation behavior inappropriate. public apology may requested.","code":""},{"path":"https://nectar.api2r.org/CODE_OF_CONDUCT.html","id":"id_2-warning","dir":"","previous_headings":"Enforcement Guidelines","what":"2. Warning","title":"Contributor Covenant Code of Conduct","text":"Community Impact: violation single incident series actions. Consequence: warning consequences continued behavior. interaction people involved, including unsolicited interaction enforcing Code Conduct, specified period time. includes avoiding interactions community spaces well external channels like social media. Violating terms may lead temporary permanent ban.","code":""},{"path":"https://nectar.api2r.org/CODE_OF_CONDUCT.html","id":"id_3-temporary-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"3. Temporary Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: serious violation community standards, including sustained inappropriate behavior. Consequence: temporary ban sort interaction public communication community specified period time. public private interaction people involved, including unsolicited interaction enforcing Code Conduct, allowed period. Violating terms may lead permanent ban.","code":""},{"path":"https://nectar.api2r.org/CODE_OF_CONDUCT.html","id":"id_4-permanent-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"4. Permanent Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Demonstrating pattern violation community standards, including sustained inappropriate behavior, harassment individual, aggression toward disparagement classes individuals. Consequence: permanent ban sort public interaction within community.","code":""},{"path":"https://nectar.api2r.org/CODE_OF_CONDUCT.html","id":"attribution","dir":"","previous_headings":"","what":"Attribution","title":"Contributor Covenant Code of Conduct","text":"Code Conduct adapted Contributor Covenant, version 2.1, available https://www.contributor-covenant.org/version/2/1/code_of_conduct.html. Community Impact Guidelines inspired [Mozilla’s code conduct enforcement ladder][https://github.com/mozilla/inclusion]. answers common questions code conduct, see FAQ https://www.contributor-covenant.org/faq. Translations available https://www.contributor-covenant.org/translations.","code":""},{"path":"https://nectar.api2r.org/CONTRIBUTING.html","id":null,"dir":"","previous_headings":"","what":"Contributing to nectar","title":"Contributing to nectar","text":"outlines propose change nectar.","code":""},{"path":"https://nectar.api2r.org/CONTRIBUTING.html","id":"fixing-typos","dir":"","previous_headings":"","what":"Fixing typos","title":"Contributing to nectar","text":"can fix typos, spelling mistakes, grammatical errors documentation directly using GitHub web interface, long changes made source file. generally means ’ll need edit roxygen2 comments .R, .Rd file. can find .R file generates .Rd reading comment first line.","code":""},{"path":"https://nectar.api2r.org/CONTRIBUTING.html","id":"bigger-changes","dir":"","previous_headings":"","what":"Bigger changes","title":"Contributing to nectar","text":"want make bigger change, ’s good idea first file issue make sure someone team agrees ’s needed. ’ve found bug, please file issue illustrates bug minimal reprex (also help write unit test, needed).","code":""},{"path":"https://nectar.api2r.org/CONTRIBUTING.html","id":"pull-request-process","dir":"","previous_headings":"Bigger changes","what":"Pull request process","title":"Contributing to nectar","text":"Fork package clone onto computer. haven’t done , recommend using usethis::create_from_github(\"jonthegeek/nectar\", fork = TRUE). Install development dependencies devtools::install_dev_deps(), make sure package passes R CMD check running devtools::check(). R CMD check doesn’t pass cleanly, ’s good idea ask help continuing. Create Git branch pull request (PR). recommend using usethis::pr_init(\"brief-description--change\"). Make changes, commit git, create PR running usethis::pr_push(), following prompts browser. title PR briefly describe change. body PR contain Fixes #issue-number. user-facing changes, add bullet top NEWS.md (.e. just first header). Follow style described https://style.tidyverse.org/news.html.","code":""},{"path":"https://nectar.api2r.org/CONTRIBUTING.html","id":"code-style","dir":"","previous_headings":"Bigger changes","what":"Code style","title":"Contributing to nectar","text":"New code follow tidyverse style guide. can use styler package apply styles, please don’t restyle code nothing PR. use roxygen2, Markdown syntax, documentation. use testthat unit tests. Contributions test cases included easier accept.","code":""},{"path":"https://nectar.api2r.org/CONTRIBUTING.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"Contributing to nectar","text":"Please note nectar project released Contributor Code Conduct. contributing project agree abide terms.","code":""},{"path":"https://nectar.api2r.org/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2023 nectar authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://nectar.api2r.org/SUPPORT.html","id":null,"dir":"","previous_headings":"","what":"Getting help with nectar","title":"Getting help with nectar","text":"Thanks using nectar! filing issue, places explore pieces put together make process smooth possible.","code":""},{"path":"https://nectar.api2r.org/SUPPORT.html","id":"make-a-reprex","dir":"","previous_headings":"","what":"Make a reprex","title":"Getting help with nectar","text":"Start making minimal reproducible example using reprex package. haven’t heard used reprex , ’re treat! Seriously, reprex make R-question-asking endeavors easier (pretty insane ROI five ten minutes ’ll take learn ’s ). additional reprex pointers, check Get help! section tidyverse site.","code":""},{"path":"https://nectar.api2r.org/SUPPORT.html","id":"where-to-ask","dir":"","previous_headings":"","what":"Where to ask?","title":"Getting help with nectar","text":"Armed reprex, next step figure ask. ’s question: ’s best ask R4DS Online Learning Community Slack. options include Posit Community, StackOverflow. people answer questions. ’s bug: ’re right place, file issue. ’re sure: let community help figure ! problem bug feature request, can easily return report . opening new issue, sure search issues pull requests make sure bug hasn’t reported /already fixed development version. default, search pre-populated :issue :open. can edit qualifiers (e.g. :pr, :closed) needed. example, ’d simply remove :open search issues repo, open closed.","code":""},{"path":"https://nectar.api2r.org/SUPPORT.html","id":"what-happens-next","dir":"","previous_headings":"","what":"What happens next?","title":"Getting help with nectar","text":"’ll try look issue soon can, packages maintained volunteers. good reprex particularly important might weeks months initial report start working . can’t reproduce bug, can’t fix !","code":""},{"path":"https://nectar.api2r.org/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Jon Harmon. Author, maintainer, copyright holder. R Consortium. Funder.","code":""},{"path":"https://nectar.api2r.org/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Harmon J (2025). nectar: Framework Web API Packages. R package version 0.0.0.9005, https://github.com/jonthegeek/nectar, https://nectar.api2r.org.","code":"@Manual{,   title = {nectar: A Framework for Web API Packages},   author = {Jon Harmon},   year = {2025},   note = {R package version 0.0.0.9005, https://github.com/jonthegeek/nectar},   url = {https://nectar.api2r.org}, }"},{"path":"https://nectar.api2r.org/index.html","id":"nectar-","dir":"","previous_headings":"","what":"A Framework for Web API Packages","title":"A Framework for Web API Packages","text":"opinionated framework use within api-wrapping R packages.","code":""},{"path":"https://nectar.api2r.org/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"A Framework for Web API Packages","text":"can install development version nectar GitHub :","code":"# install.packages(\"remotes\") remotes::install_github(\"jonthegeek/nectar\")"},{"path":"https://nectar.api2r.org/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"A Framework for Web API Packages","text":"Add usage information examples .","code":""},{"path":"https://nectar.api2r.org/index.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"A Framework for Web API Packages","text":"Please note nectar project released Contributor Code Conduct. contributing project, agree abide terms.","code":""},{"path":"https://nectar.api2r.org/principles.html","id":null,"dir":"","previous_headings":"","what":"nectar design principles","title":"nectar design principles","text":"experiment making key package design principles explicit, versus implicit code. goal make maintenance easier, spread time across people. (borrowed https://github.com/r-lib/usethis/blob/main/principles.md)","code":""},{"path":"https://nectar.api2r.org/principles.html","id":"naming","dir":"","previous_headings":"","what":"naming","title":"nectar design principles","text":"Function argument names package reflect tug--war conventions used {httr2} conventions used OpenAPI Specification (OAS). Use rules decide name things: Names lower_snake_case. Names unique. example, {httr2} uses path several functions refer URL path, req_cookie_preserve() path argument -disk location. use file_path second argument. Internal functions begin .. older convention, find useful keeping mental model package clear. unexported function later exported, work required make sure function renamed everywhere, consider feature, bug; makes likely ’ll catch strange circular references sticking points. sub-function (internal) necessary keep code clean readable, doesn’t anything unique implementing function ’s calling , append _impl (implementation) end function name. example, .req_path_append() calls .req_path_append_impl() path argument provided. Lean toward {httr2} conventions names. function modifies request object, start req_, argument req. function modifies response object, start resp_, argument resp. Exception: keep documentation consistent, use resps functions accept lists resp objects, even also accept individual resp objects. fact, functions resps arguments deal case resp individual response object. argument name confusing {httr2}, might acceptable rename . careful . See unique names, though. Names overlap {httr2} function names. modified req_perform() named req_perform(). function essentially translates OAS {httr2}, use OAS names arguments, {httr2} names function. However… Arguments syntactic. Instead (used OAS Security Scheme Objects), use location.","code":""},{"path":"https://nectar.api2r.org/principles.html","id":"documentation","dir":"","previous_headings":"","what":"documentation","title":"nectar design principles","text":"exported functions must documented. Ideally, internal functions also documented, @keywords internal. need full description, include one-line description “Title” area, document parameters. time, parameters documented internal functions, inherited calling exported function (see ). Exception: _impl() functions need documentation; parent function’s documentation covers details cases. Use @inheritParams liberally. Every parameter defined exactly one place. makes much easier maintain definitions. add new parameter, globally search (ctrl-shift-F RStudio) @param {name} make sure isn’t already defined. parameter reused doesn’t clear “home” (eg, req used several unrelated functions), define .shared-params block aaa-shared.R. ’s ok err side definining things . Likewise, return value reused doesn’t clear “home” (eg httr2::request objects returned several functions), define aaa-shared.R block @name .shared-{name}, name concisely describes return value. Use function documentation @inherit .shared-{name} return. choice contradicts choice {httr2}, explain justify documentation. Make sure extremely clear default different.","code":""},{"path":"https://nectar.api2r.org/principles.html","id":"testing","dir":"","previous_headings":"","what":"testing","title":"nectar design principles","text":"TODO","code":""},{"path":"https://nectar.api2r.org/principles.html","id":"motivation","dir":"","previous_headings":"","what":"motivation","title":"nectar design principles","text":"{nectar} aimed package writers wrapping APIs, particularly APIs clear OpenAPI specification. intentionally opinionated framework, make assumptions {httr2} things work. Let’s solve problems , propogate solutions API-wrapping packages use nectar. think means {nectar} often two paths function: one things set just-can use information request class object figure precisely , fall-people using {nectar} haven’t bought whole framework. fall-might fail lot cases, aim make sure works common use case(s). said, probably start fall-new areas, refine/perfect.","code":""},{"path":"https://nectar.api2r.org/reference/call_api.html","id":null,"dir":"Reference","previous_headings":"","what":"Send a request to an API — call_api","title":"Send a request to an API — call_api","text":"function implements opinionated framework making API calls. intended used inside API client package. serves wrapper around req_ family functions, httr2::request(), well httr2::req_perform() httr2::req_perform_iterative(), , default, httr2::resp_body_json().","code":""},{"path":"https://nectar.api2r.org/reference/call_api.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Send a request to an API — call_api","text":"","code":"call_api(   base_url,   ...,   path = NULL,   query = NULL,   body = NULL,   mime_type = NULL,   method = NULL,   auth_fn = NULL,   auth_args = list(),   response_parser = resp_tidy,   response_parser_args = list(),   next_req = NULL,   max_reqs = Inf,   max_tries_per_req = 3,   additional_user_agent = NULL )"},{"path":"https://nectar.api2r.org/reference/call_api.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Send a request to an API — call_api","text":"base_url (length-1 character) part url shared calls API. cases may family base URLs, need choose one. ... dots future extensions must empty. path (character list) route API endpoint. Optionally, list character vector path one unnamed arguments (concatenated \"/\") plus named arguments glue::glue() path. query (character list) optional list character vector parameters pass query portion request. Can also include .multi argument pass httr2::req_url_query() control elements containing multiple values handled. body (multiple types) object use body request. component body path, pass fs::path() otherwise give class \"fs_path\" indicate path. mime_type (length-1 character) mime type files present body. APIs allow leave NULL guess. method (length-1 character, optional) method something GET POST, supply . Case ignored. auth_fn (function) function use authenticate request. default (NULL), authentication performed. auth_args (list) optional list arguments auth_fn function. response_parser (function) function parse server response (resp). Defaults httr2::resp_body_json(), since JSON responses common. Set NULL return raw response httr2::req_perform(). response_parser_args (list) Additional arguments pass response_parser. next_req optional function takes previous response (resp) generate next request call httr2::req_perform_iterative(). function can usually generated using one iteration helpers described httr2::iterate_with_offset(). default, choose_pagination_fn() used check pagination policy (see req_pagination_policy()), returns NULL policy defined. max_reqs maximum number separate requests perform. Passed max_reqs argument httr2::req_perform_iterative() next_req supplied. mostly likely want change default value (2) Inf validate request works. max_tries_per_req maximum number times attempt individual request. Passed max_tries argument httr2::req_retry(). additional_user_agent (length-1 character) string identify request coming . automatically include information package nectar, use provide additional details. Default NULL.","code":""},{"path":"https://nectar.api2r.org/reference/call_api.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Send a request to an API — call_api","text":"response API, parsed response_parser.","code":""},{"path":[]},{"path":"https://nectar.api2r.org/reference/choose_pagination_fn.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract a pagination policy from a request — choose_pagination_fn","title":"Extract a pagination policy from a request — choose_pagination_fn","text":"request pagination policy defined req_pagination_policy(), extract pagination_fn policy. Otherwise return NULL.","code":""},{"path":"https://nectar.api2r.org/reference/choose_pagination_fn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract a pagination policy from a request — choose_pagination_fn","text":"","code":"choose_pagination_fn(req)"},{"path":"https://nectar.api2r.org/reference/choose_pagination_fn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract a pagination policy from a request — choose_pagination_fn","text":"req (httr2_request) httr2::request() object.","code":""},{"path":"https://nectar.api2r.org/reference/choose_pagination_fn.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract a pagination policy from a request — choose_pagination_fn","text":"pagination function, NULL.","code":""},{"path":"https://nectar.api2r.org/reference/choose_pagination_fn.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract a pagination policy from a request — choose_pagination_fn","text":"","code":"req <- httr2::request(\"https://example.com\") req <- req_pagination_policy(req, httr2::iterate_with_offset(\"page\")) choose_pagination_fn(req) #> function (resp, req)  #> { #>     if (!is.null(resp_pages) && !known_total) { #>         n <- resp_pages(resp) #>         if (!is.null(n)) { #>             known_total <<- TRUE #>             signal_total_pages(n) #>         } #>     } #>     if (!isTRUE(resp_complete(resp))) { #>         i <<- i + offset #>         req %>% req_url_query(`:=`(!!param_name, i)) #>     } #> } #> <bytecode: 0x562642bf5e58> #> <environment: 0x562642bf4920>"},{"path":"https://nectar.api2r.org/reference/compact_nested_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Discard empty elements — compact_nested_list","title":"Discard empty elements — compact_nested_list","text":"Discard empty elements nested lists.","code":""},{"path":"https://nectar.api2r.org/reference/compact_nested_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Discard empty elements — compact_nested_list","text":"","code":"compact_nested_list(lst)"},{"path":"https://nectar.api2r.org/reference/compact_nested_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Discard empty elements — compact_nested_list","text":"lst (nested) list filter.","code":""},{"path":"https://nectar.api2r.org/reference/compact_nested_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Discard empty elements — compact_nested_list","text":"list, minus empty elements branches.","code":""},{"path":"https://nectar.api2r.org/reference/compact_nested_list.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Discard empty elements — compact_nested_list","text":"","code":"x <- list(   a = list(     b = letters,     c = NULL,     d = 1:5   ),   e = NULL,   f = 1:3 ) compact_nested_list(x) #> $a #> $a$b #>  [1] \"a\" \"b\" \"c\" \"d\" \"e\" \"f\" \"g\" \"h\" \"i\" \"j\" \"k\" \"l\" \"m\" \"n\" \"o\" \"p\" \"q\" \"r\" \"s\" #> [20] \"t\" \"u\" \"v\" \"w\" \"x\" \"y\" \"z\" #>  #> $a$d #> [1] 1 2 3 4 5 #>  #>  #> $f #> [1] 1 2 3 #>"},{"path":"https://nectar.api2r.org/reference/do_if_fn_defined.html","id":null,"dir":"Reference","previous_headings":"","what":"Use a provided function — do_if_fn_defined","title":"Use a provided function — do_if_fn_defined","text":"constructing API calls programmatically, may encounter situations upstream task indicate function apply. example, one endpoint might use special auth function used endpoints. function exists make coding situations easier.","code":""},{"path":"https://nectar.api2r.org/reference/do_if_fn_defined.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Use a provided function — do_if_fn_defined","text":"","code":"do_if_fn_defined(x, fn = NULL, ..., call = rlang::caller_env())"},{"path":"https://nectar.api2r.org/reference/do_if_fn_defined.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Use a provided function — do_if_fn_defined","text":"x object potentially modify, httr2::request() object. fn function apply x. fn NULL, x returned unchanged. ... Additional arguments pass fn. call (environment) environment function called, e.g. rlang::caller_env() (default). environment mentioned error messages source error. argument particularly useful functions intended called utilities inside functions.","code":""},{"path":"https://nectar.api2r.org/reference/do_if_fn_defined.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Use a provided function — do_if_fn_defined","text":"object, potentially modified.","code":""},{"path":"https://nectar.api2r.org/reference/do_if_fn_defined.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Use a provided function — do_if_fn_defined","text":"","code":"build_api_req <- function(endpoint, auth_fn = NULL, ...) {   req <- httr2::request(\"https://example.com\")   req <- httr2::req_url_path_append(req, endpoint)   do_if_fn_defined(req, auth_fn, ...) }  # Most endpoints of this API do not require authentication. unsecure_req <- build_api_req(\"unsecure_endpoint\") unsecure_req$headers #> list()  # But one endpoint requires authentication. secure_req <- build_api_req(   \"secure_endpoint\", httr2::req_auth_bearer_token, \"secret-token\" ) secure_req$headers$Authorization #> [1] \"Bearer secret-token\""},{"path":"https://nectar.api2r.org/reference/dot-compact_nested_list_impl.html","id":null,"dir":"Reference","previous_headings":"","what":"Discard empty elements — .compact_nested_list_impl","title":"Discard empty elements — .compact_nested_list_impl","text":"Discard empty elements","code":""},{"path":"https://nectar.api2r.org/reference/dot-compact_nested_list_impl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Discard empty elements — .compact_nested_list_impl","text":"","code":".compact_nested_list_impl(lst, depth = 1L)"},{"path":"https://nectar.api2r.org/reference/dot-compact_nested_list_impl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Discard empty elements — .compact_nested_list_impl","text":"lst (nested) list filter. depth current recursion depth.","code":""},{"path":"https://nectar.api2r.org/reference/dot-compact_nested_list_impl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Discard empty elements — .compact_nested_list_impl","text":"list, minus empty elements branches.","code":""},{"path":"https://nectar.api2r.org/reference/dot-do_if_args_defined.html","id":null,"dir":"Reference","previous_headings":"","what":"Use a function if args are provided — .do_if_args_defined","title":"Use a function if args are provided — .do_if_args_defined","text":"Use function args provided","code":""},{"path":"https://nectar.api2r.org/reference/dot-do_if_args_defined.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Use a function if args are provided — .do_if_args_defined","text":"","code":".do_if_args_defined(x, fn = NULL, ..., call = rlang::caller_env())"},{"path":"https://nectar.api2r.org/reference/dot-do_if_args_defined.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Use a function if args are provided — .do_if_args_defined","text":"x (multiple types) object update. fn function apply x. fn NULL, x returned unchanged. ... dots future extensions must empty. call (environment) environment function called, e.g. rlang::caller_env() (default). environment mentioned error messages source error. argument particularly useful functions intended called utilities inside functions.","code":""},{"path":"https://nectar.api2r.org/reference/dot-do_if_args_defined.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Use a function if args are provided — .do_if_args_defined","text":"object, potentially modified.","code":""},{"path":"https://nectar.api2r.org/reference/dot-get_pkg_version.html","id":null,"dir":"Reference","previous_headings":"","what":"Get package numeric version — .get_pkg_version","title":"Get package numeric version — .get_pkg_version","text":"Get package numeric version","code":""},{"path":"https://nectar.api2r.org/reference/dot-get_pkg_version.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get package numeric version — .get_pkg_version","text":"","code":".get_pkg_version(pkg_name = get_pkg_name(call), call = rlang::caller_env())"},{"path":"https://nectar.api2r.org/reference/dot-get_pkg_version.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get package numeric version — .get_pkg_version","text":"pkg_name (length-1 character) name calling package. usually automatically determined based source call. call (environment) environment function called, e.g. rlang::caller_env() (default). environment mentioned error messages source error. argument particularly useful functions intended called utilities inside functions.","code":""},{"path":"https://nectar.api2r.org/reference/dot-get_pkg_version.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get package numeric version — .get_pkg_version","text":"numeric version package.","code":""},{"path":"https://nectar.api2r.org/reference/dot-httr2_default_user_agent.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract the httr2 default user agent — .httr2_default_user_agent","title":"Extract the httr2 default user agent — .httr2_default_user_agent","text":"Extract httr2 default user agent","code":""},{"path":"https://nectar.api2r.org/reference/dot-httr2_default_user_agent.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract the httr2 default user agent — .httr2_default_user_agent","text":"","code":".httr2_default_user_agent()"},{"path":"https://nectar.api2r.org/reference/dot-httr2_default_user_agent.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract the httr2 default user agent — .httr2_default_user_agent","text":"user agent string generated installed version httr2.","code":""},{"path":"https://nectar.api2r.org/reference/dot-lib_user_agent_append.html","id":null,"dir":"Reference","previous_headings":"","what":"Add a library and version to a user agent — .lib_user_agent_append","title":"Add a library and version to a user agent — .lib_user_agent_append","text":"Add library version user agent","code":""},{"path":"https://nectar.api2r.org/reference/dot-lib_user_agent_append.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add a library and version to a user agent — .lib_user_agent_append","text":"","code":".lib_user_agent_append(   existing_user_agent,   name,   version,   url = NULL,   call = rlang::caller_env() )"},{"path":"https://nectar.api2r.org/reference/dot-lib_user_agent_append.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add a library and version to a user agent — .lib_user_agent_append","text":"existing_user_agent (length-1 character, optional) existing user agent, value req$options$useragent httr2::request() object. name (length-1 character) name package thing add remove user agent string. version (length-1 character) version name. url (length-1 character) optional url associated name. call (environment) environment function called, e.g. rlang::caller_env() (default). environment mentioned error messages source error. argument particularly useful functions intended called utilities inside functions.","code":""},{"path":"https://nectar.api2r.org/reference/dot-lib_user_agent_append.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add a library and version to a user agent — .lib_user_agent_append","text":"modified user agent string library.","code":""},{"path":"https://nectar.api2r.org/reference/dot-lib_user_agent_string.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate library user agent string — .lib_user_agent_string","title":"Generate library user agent string — .lib_user_agent_string","text":"Generate library user agent string","code":""},{"path":"https://nectar.api2r.org/reference/dot-lib_user_agent_string.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate library user agent string — .lib_user_agent_string","text":"","code":".lib_user_agent_string(name, version, url = NULL, call = rlang::caller_env())"},{"path":"https://nectar.api2r.org/reference/dot-lib_user_agent_string.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate library user agent string — .lib_user_agent_string","text":"name (length-1 character) name package thing add remove user agent string. version (length-1 character) version name. url (length-1 character) optional url associated name. call (environment) environment function called, e.g. rlang::caller_env() (default). environment mentioned error messages source error. argument particularly useful functions intended called utilities inside functions.","code":""},{"path":"https://nectar.api2r.org/reference/dot-lib_user_agent_string.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate library user agent string — .lib_user_agent_string","text":"user agent string library.","code":""},{"path":"https://nectar.api2r.org/reference/dot-nectar_abort.html","id":null,"dir":"Reference","previous_headings":"","what":"Error messaging for this package. — .nectar_abort","title":"Error messaging for this package. — .nectar_abort","text":"Error messaging package.","code":""},{"path":"https://nectar.api2r.org/reference/dot-nectar_abort.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Error messaging for this package. — .nectar_abort","text":"","code":".nectar_abort(   message,   error_class,   ...,   call = rlang::caller_env(),   .envir = rlang::caller_env() )"},{"path":"https://nectar.api2r.org/reference/dot-nectar_abort.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Error messaging for this package. — .nectar_abort","text":"message formatted via call cli_bullets(). error_class (length-1 character) short string identify error family. ... dots future extensions must empty. call (environment) environment function called, e.g. rlang::caller_env() (default). environment mentioned error messages source error. argument particularly useful functions intended called utilities inside functions. .envir Environment evaluate glue expressions .","code":""},{"path":"https://nectar.api2r.org/reference/dot-nectar_abort.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Error messaging for this package. — .nectar_abort","text":"error condition classes \"nectar-condition\", \"nectar-error\", \"nectar-error-{error_class}\".","code":""},{"path":"https://nectar.api2r.org/reference/dot-nectar_user_agent_append.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a nectar user agent string — .nectar_user_agent_append","title":"Create a nectar user agent string — .nectar_user_agent_append","text":"Create modify user agent string identify request used nectar package.","code":""},{"path":"https://nectar.api2r.org/reference/dot-nectar_user_agent_append.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a nectar user agent string — .nectar_user_agent_append","text":"","code":".nectar_user_agent_append(   existing_user_agent = NULL,   call = rlang::caller_env() )"},{"path":"https://nectar.api2r.org/reference/dot-nectar_user_agent_append.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a nectar user agent string — .nectar_user_agent_append","text":"existing_user_agent (length-1 character, optional) existing user agent, value req$options$useragent httr2::request() object. call (environment) environment function called, e.g. rlang::caller_env() (default). environment mentioned error messages source error. argument particularly useful functions intended called utilities inside functions.","code":""},{"path":"https://nectar.api2r.org/reference/dot-nectar_user_agent_append.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a nectar user agent string — .nectar_user_agent_append","text":"string use user agent, nectar user agent prepended exactly .","code":""},{"path":"https://nectar.api2r.org/reference/dot-next_cursor_finder.html","id":null,"dir":"Reference","previous_headings":"","what":"Cursor finder factory — .next_cursor_finder","title":"Cursor finder factory — .next_cursor_finder","text":"Cursor finder factory","code":""},{"path":"https://nectar.api2r.org/reference/dot-next_cursor_finder.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cursor finder factory — .next_cursor_finder","text":"","code":".next_cursor_finder(next_cursor_path, resp_body_fn = resp_body_auto)"},{"path":"https://nectar.api2r.org/reference/dot-next_cursor_finder.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cursor finder factory — .next_cursor_finder","text":"next_cursor_path (character) vector indicating path next_cursor element body response. example, Slack API, value c(\"response_metadata\", \"next_cursor\"), Crossref Unified Resource API, value \"next-cursor\". resp_body_fn function extract body response. Default: resp_body_auto().","code":""},{"path":"https://nectar.api2r.org/reference/dot-next_cursor_finder.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Cursor finder factory — .next_cursor_finder","text":"function returns next cursor, NULL next cursor NULL (otherwise length-0) \"\".","code":""},{"path":"https://nectar.api2r.org/reference/dot-pkg_user_agent_append.html","id":null,"dir":"Reference","previous_headings":"","what":"Append package user agent — .pkg_user_agent_append","title":"Append package user agent — .pkg_user_agent_append","text":"Append package user agent","code":""},{"path":"https://nectar.api2r.org/reference/dot-pkg_user_agent_append.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Append package user agent — .pkg_user_agent_append","text":"","code":".pkg_user_agent_append(   existing_user_agent = NULL,   pkg_name = get_pkg_name(call),   pkg_url = NULL,   call = rlang::caller_env() )"},{"path":"https://nectar.api2r.org/reference/dot-pkg_user_agent_append.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Append package user agent — .pkg_user_agent_append","text":"existing_user_agent (length-1 character, optional) existing user agent, value req$options$useragent httr2::request() object. pkg_name (length-1 character) name calling package. usually automatically determined based source call. pkg_url (length-1 character) url information calling package (default NULL). call (environment) environment function called, e.g. rlang::caller_env() (default). environment mentioned error messages source error. argument particularly useful functions intended called utilities inside functions.","code":""},{"path":"https://nectar.api2r.org/reference/dot-pkg_user_agent_append.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Append package user agent — .pkg_user_agent_append","text":"string use user agent. Attach agent request httr2::req_user_agent().","code":""},{"path":"https://nectar.api2r.org/reference/dot-req_apply_retry_default.html","id":null,"dir":"Reference","previous_headings":"","what":"Add a retry policy if none is defined — .req_apply_retry_default","title":"Add a retry policy if none is defined — .req_apply_retry_default","text":"Add retry policy none defined","code":""},{"path":"https://nectar.api2r.org/reference/dot-req_apply_retry_default.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add a retry policy if none is defined — .req_apply_retry_default","text":"","code":".req_apply_retry_default(req, max_tries_per_req)"},{"path":"https://nectar.api2r.org/reference/dot-req_apply_retry_default.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add a retry policy if none is defined — .req_apply_retry_default","text":"req first request perform. max_tries_per_req maximum number times attempt individual request. Passed max_tries argument httr2::req_retry().","code":""},{"path":"https://nectar.api2r.org/reference/dot-req_apply_retry_default.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add a retry policy if none is defined — .req_apply_retry_default","text":"list httr2::response() objects, one request performed. list additional class nectar_responses.","code":""},{"path":"https://nectar.api2r.org/reference/dot-req_auth_api_key_cookie.html","id":null,"dir":"Reference","previous_headings":"","what":"Authenticate with an API key in a cookie — .req_auth_api_key_cookie","title":"Authenticate with an API key in a cookie — .req_auth_api_key_cookie","text":"Authenticate API key cookie","code":""},{"path":"https://nectar.api2r.org/reference/dot-req_auth_api_key_cookie.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Authenticate with an API key in a cookie — .req_auth_api_key_cookie","text":"","code":".req_auth_api_key_cookie(req, ..., file_path = NULL)"},{"path":"https://nectar.api2r.org/reference/dot-req_auth_api_key_cookie.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Authenticate with an API key in a cookie — .req_auth_api_key_cookie","text":"req (httr2_request) httr2::request() object. ... dots future extensions must empty. file_path (length-1 character, optional) path cookie. value provided function returns req unchanged.","code":""},{"path":"https://nectar.api2r.org/reference/dot-req_auth_api_key_cookie.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Authenticate with an API key in a cookie — .req_auth_api_key_cookie","text":"httr2::request() object.","code":""},{"path":"https://nectar.api2r.org/reference/dot-req_auth_api_key_header.html","id":null,"dir":"Reference","previous_headings":"","what":"Authenticate with an API key in the header of the request — .req_auth_api_key_header","title":"Authenticate with an API key in the header of the request — .req_auth_api_key_header","text":"Authenticate API key header request","code":""},{"path":"https://nectar.api2r.org/reference/dot-req_auth_api_key_header.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Authenticate with an API key in the header of the request — .req_auth_api_key_header","text":"","code":".req_auth_api_key_header(req, ..., parameter_name, api_key = NULL)"},{"path":"https://nectar.api2r.org/reference/dot-req_auth_api_key_header.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Authenticate with an API key in the header of the request — .req_auth_api_key_header","text":"req (httr2_request) httr2::request() object. ... dots future extensions must empty. parameter_name (length-1 character) name use API key. api_key (length-1 character) API key use.","code":""},{"path":"https://nectar.api2r.org/reference/dot-req_auth_api_key_header.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Authenticate with an API key in the header of the request — .req_auth_api_key_header","text":"httr2::request() object.","code":""},{"path":"https://nectar.api2r.org/reference/dot-req_auth_api_key_query.html","id":null,"dir":"Reference","previous_headings":"","what":"Authenticate with an API key in the query of the request — .req_auth_api_key_query","title":"Authenticate with an API key in the query of the request — .req_auth_api_key_query","text":"Authenticate API key query request","code":""},{"path":"https://nectar.api2r.org/reference/dot-req_auth_api_key_query.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Authenticate with an API key in the query of the request — .req_auth_api_key_query","text":"","code":".req_auth_api_key_query(req, ..., parameter_name, api_key)"},{"path":"https://nectar.api2r.org/reference/dot-req_auth_api_key_query.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Authenticate with an API key in the query of the request — .req_auth_api_key_query","text":"req (httr2_request) httr2::request() object. ... dots future extensions must empty. parameter_name (length-1 character) name use API key. api_key (length-1 character) API key use.","code":""},{"path":"https://nectar.api2r.org/reference/dot-req_auth_api_key_query.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Authenticate with an API key in the query of the request — .req_auth_api_key_query","text":"httr2::request() object.","code":""},{"path":"https://nectar.api2r.org/reference/dot-req_body_auto.html","id":null,"dir":"Reference","previous_headings":"","what":"Send data in request body — .req_body_auto","title":"Send data in request body — .req_body_auto","text":"Automatically choose httr2::req_body_json() httr2::req_body_multipart() based content body. currently experimental needs tested APIs.","code":""},{"path":"https://nectar.api2r.org/reference/dot-req_body_auto.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Send data in request body — .req_body_auto","text":"","code":".req_body_auto(req, body, mime_type = NULL)"},{"path":"https://nectar.api2r.org/reference/dot-req_body_auto.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Send data in request body — .req_body_auto","text":"req (httr2_request) httr2::request() object. body (multiple types) object use body request. component body path, pass fs::path() otherwise give class \"fs_path\" indicate path. mime_type (length-1 character) mime type files present body. APIs allow leave NULL guess.","code":""},{"path":"https://nectar.api2r.org/reference/dot-req_body_auto.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Send data in request body — .req_body_auto","text":"modified HTTP request.","code":""},{"path":"https://nectar.api2r.org/reference/dot-req_method_apply.html","id":null,"dir":"Reference","previous_headings":"","what":"Add a method if it is supplied — .req_method_apply","title":"Add a method if it is supplied — .req_method_apply","text":"httr2::req_method() errors method NULL, rather using default rules. function deals .","code":""},{"path":"https://nectar.api2r.org/reference/dot-req_method_apply.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add a method if it is supplied — .req_method_apply","text":"","code":".req_method_apply(req, method)"},{"path":"https://nectar.api2r.org/reference/dot-req_method_apply.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add a method if it is supplied — .req_method_apply","text":"req (httr2_request) httr2::request() object. method (length-1 character, optional) method something GET POST, supply . Case ignored.","code":""},{"path":"https://nectar.api2r.org/reference/dot-req_method_apply.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add a method if it is supplied — .req_method_apply","text":"httr2::request() object.","code":""},{"path":"https://nectar.api2r.org/reference/dot-req_path_append.html","id":null,"dir":"Reference","previous_headings":"","what":"Process a path with glue syntax and append it — .req_path_append","title":"Process a path with glue syntax and append it — .req_path_append","text":"Process path glue syntax append ","code":""},{"path":"https://nectar.api2r.org/reference/dot-req_path_append.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Process a path with glue syntax and append it — .req_path_append","text":"","code":".req_path_append(req, path)"},{"path":"https://nectar.api2r.org/reference/dot-req_path_append.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Process a path with glue syntax and append it — .req_path_append","text":"req (httr2_request) httr2::request() object. path (character list) route API endpoint. Optionally, list character vector path one unnamed arguments (concatenated \"/\") plus named arguments glue::glue() path.","code":""},{"path":"https://nectar.api2r.org/reference/dot-req_path_append.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Process a path with glue syntax and append it — .req_path_append","text":"httr2::request() object.","code":""},{"path":"https://nectar.api2r.org/reference/dot-req_policy.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply policies to a request — .req_policy","title":"Apply policies to a request — .req_policy","text":"function based unexported req_policies() function httr2. used apply policies request object. currently export function, may change future.","code":""},{"path":"https://nectar.api2r.org/reference/dot-req_policy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply policies to a request — .req_policy","text":"","code":".req_policy(req, ..., call = rlang::caller_env())"},{"path":"https://nectar.api2r.org/reference/dot-req_policy.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Apply policies to a request — .req_policy","text":"req (httr2_request) httr2::request() object. ...  call (environment) environment function called, e.g. rlang::caller_env() (default). environment mentioned error messages source error. argument particularly useful functions intended called utilities inside functions.","code":""},{"path":"https://nectar.api2r.org/reference/dot-req_policy.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Apply policies to a request — .req_policy","text":"httr2::request() object.","code":""},{"path":"https://nectar.api2r.org/reference/dot-req_query_flatten.html","id":null,"dir":"Reference","previous_headings":"","what":"Add non-empty query elements to a request — .req_query_flatten","title":"Add non-empty query elements to a request — .req_query_flatten","text":"Add non-empty query elements request","code":""},{"path":"https://nectar.api2r.org/reference/dot-req_query_flatten.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add non-empty query elements to a request — .req_query_flatten","text":"","code":".req_query_flatten(req, query)"},{"path":"https://nectar.api2r.org/reference/dot-req_query_flatten.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add non-empty query elements to a request — .req_query_flatten","text":"req (httr2_request) httr2::request() object. query (character list) optional list character vector parameters pass query portion request. Can also include .multi argument pass httr2::req_url_query() control elements containing multiple values handled.","code":""},{"path":"https://nectar.api2r.org/reference/dot-req_query_flatten.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add non-empty query elements to a request — .req_query_flatten","text":"httr2::request() object.","code":""},{"path":"https://nectar.api2r.org/reference/dot-resp_body_auto_other.html","id":null,"dir":"Reference","previous_headings":"","what":"Automatically choose more body parsers — .resp_body_auto_other","title":"Automatically choose more body parsers — .resp_body_auto_other","text":"helper function exists find somewhat variable content types attempt send proper body parser.","code":""},{"path":"https://nectar.api2r.org/reference/dot-resp_body_auto_other.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Automatically choose more body parsers — .resp_body_auto_other","text":"","code":".resp_body_auto_other(resp)"},{"path":"https://nectar.api2r.org/reference/dot-resp_body_auto_other.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Automatically choose more body parsers — .resp_body_auto_other","text":"resp (httr2_response) single httr2::response() object (returned httr2::req_perform()).","code":""},{"path":"https://nectar.api2r.org/reference/dot-resp_body_auto_other.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Automatically choose more body parsers — .resp_body_auto_other","text":"parsed response body.","code":""},{"path":"https://nectar.api2r.org/reference/dot-shared-params.html","id":null,"dir":"Reference","previous_headings":"","what":"Parameters used in multiple functions — .shared-params","title":"Parameters used in multiple functions — .shared-params","text":"Reused parameter definitions gathered easier editing.","code":""},{"path":"https://nectar.api2r.org/reference/dot-shared-params.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parameters used in multiple functions — .shared-params","text":"additional_user_agent (length-1 character) string identify request coming . automatically include information package nectar, use provide additional details. Default NULL. api_key (length-1 character) API key use. arg (length-1 character) argument name string. argument mentioned error messages input origin problem. auth_args (list) optional list arguments auth_fn function. auth_fn (function) function use authenticate request. default (NULL), authentication performed. base_url (length-1 character) part url shared calls API. cases may family base URLs, need choose one. body (multiple types) object use body request. component body path, pass fs::path() otherwise give class \"fs_path\" indicate path. call (environment) environment function called, e.g. rlang::caller_env() (default). environment mentioned error messages source error. argument particularly useful functions intended called utilities inside functions. check_type (length-1 logical) Whether check response expected content type. Set FALSE response specifically tagged proper type. existing_user_agent (length-1 character, optional) existing user agent, value req$options$useragent httr2::request() object. method (length-1 character, optional) method something GET POST, supply . Case ignored. mime_type (length-1 character) mime type files present body. APIs allow leave NULL guess. name (length-1 character) name package thing add remove user agent string. pkg_name (length-1 character) name calling package. usually automatically determined based source call. pkg_url (length-1 character) url information calling package (default NULL). parameter_name (length-1 character) name use API key. path (character list) route API endpoint. Optionally, list character vector path one unnamed arguments (concatenated \"/\") plus named arguments glue::glue() path. query (character list) optional list character vector parameters pass query portion request. Can also include .multi argument pass httr2::req_url_query() control elements containing multiple values handled. req (httr2_request) httr2::request() object. resp (httr2_response) single httr2::response() object (returned httr2::req_perform()). resps (httr2_response, nectar_responses, list) single httr2::response() object (returned httr2::req_perform()) list objects (returned req_perform_opinionated() httr2::req_perform_iterative()). resp_body_fn function extract body response. Default: resp_body_auto(). response_parser (function) function parse server response (resp). Defaults httr2::resp_body_json(), since JSON responses common. Set NULL return raw response httr2::req_perform(). response_parser_args (list) optional list arguments pass response_parser function (addition resp). url (length-1 character) optional url associated name. version (length-1 character) version name. x (multiple types) object update. ... dots future extensions must empty.","code":""},{"path":"https://nectar.api2r.org/reference/dot-shared-request.html","id":null,"dir":"Reference","previous_headings":"","what":"Returns from request functions — .shared-request","title":"Returns from request functions — .shared-request","text":"Returns request functions","code":""},{"path":"https://nectar.api2r.org/reference/dot-shared-request.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Returns from request functions — .shared-request","text":"httr2::request() object.","code":""},{"path":"https://nectar.api2r.org/reference/dot-user_agent_remove.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove package and version from user agent — .user_agent_remove","title":"Remove package and version from user agent — .user_agent_remove","text":"Remove package version user agent","code":""},{"path":"https://nectar.api2r.org/reference/dot-user_agent_remove.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove package and version from user agent — .user_agent_remove","text":"","code":".user_agent_remove(   existing_user_agent,   name,   url = NULL,   call = rlang::caller_env() )"},{"path":"https://nectar.api2r.org/reference/dot-user_agent_remove.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove package and version from user agent — .user_agent_remove","text":"existing_user_agent (length-1 character, optional) existing user agent, value req$options$useragent httr2::request() object. name (length-1 character) name package thing add remove user agent string. url (length-1 character) optional url associated name. call (environment) environment function called, e.g. rlang::caller_env() (default). environment mentioned error messages source error. argument particularly useful functions intended called utilities inside functions.","code":""},{"path":"https://nectar.api2r.org/reference/dot-user_agent_remove.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Remove package and version from user agent — .user_agent_remove","text":"modified user agent string, minus name, associated version, url.","code":""},{"path":"https://nectar.api2r.org/reference/get_pkg_name.html","id":null,"dir":"Reference","previous_headings":"","what":"Get calling package name — get_pkg_name","title":"Get calling package name — get_pkg_name","text":"Get calling package name","code":""},{"path":"https://nectar.api2r.org/reference/get_pkg_name.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get calling package name — get_pkg_name","text":"","code":"get_pkg_name(call = rlang::caller_env())"},{"path":"https://nectar.api2r.org/reference/get_pkg_name.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get calling package name — get_pkg_name","text":"call (environment) environment function called, e.g. rlang::caller_env() (default). environment mentioned error messages source error. argument particularly useful functions intended called utilities inside functions.","code":""},{"path":"https://nectar.api2r.org/reference/get_pkg_name.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get calling package name — get_pkg_name","text":"package name, NULL (invisibly). function intended used nectar functions automatically detect calling package name.","code":""},{"path":"https://nectar.api2r.org/reference/iterate_with_json_cursor.html","id":null,"dir":"Reference","previous_headings":"","what":"Iteration helper for json cursors — iterate_with_json_cursor","title":"Iteration helper for json cursors — iterate_with_json_cursor","text":"function intended replacement httr2::iterate_with_cursor() common situation response body json, cursor can \"empty\" various ways. Even within single API, endpoints might return NULL next_cursor indicate pages results, endpoints might return \"\". function normalizes results NULL.","code":""},{"path":"https://nectar.api2r.org/reference/iterate_with_json_cursor.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Iteration helper for json cursors — iterate_with_json_cursor","text":"","code":"iterate_with_json_cursor(param_name = \"cursor\", next_cursor_path)"},{"path":"https://nectar.api2r.org/reference/iterate_with_json_cursor.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Iteration helper for json cursors — iterate_with_json_cursor","text":"param_name (length-1 character) name cursor parameter request. next_cursor_path (character) vector indicating path next_cursor element body response. example, Slack API, value c(\"response_metadata\", \"next_cursor\"), Crossref Unified Resource API, value \"next-cursor\".","code":""},{"path":"https://nectar.api2r.org/reference/iterate_with_json_cursor.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Iteration helper for json cursors — iterate_with_json_cursor","text":"function takes response previous request, returns next request results.","code":""},{"path":"https://nectar.api2r.org/reference/nectar-package.html","id":null,"dir":"Reference","previous_headings":"","what":"nectar: A Framework for Web API Packages — nectar-package","title":"nectar: A Framework for Web API Packages — nectar-package","text":"opinionated framework use within api-wrapping R packages.","code":""},{"path":[]},{"path":"https://nectar.api2r.org/reference/nectar-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"nectar: A Framework for Web API Packages — nectar-package","text":"Maintainer: Jon Harmon jonthegeek@gmail.com (ORCID) [copyright holder] contributors: R Consortium [funder]","code":""},{"path":"https://nectar.api2r.org/reference/req_auth_api_key.html","id":null,"dir":"Reference","previous_headings":"","what":"Authenticate with an API key — req_auth_api_key","title":"Authenticate with an API key — req_auth_api_key","text":"Many APIs provide API keys can used authenticate requests (, often, provide information user). function helps apply keys requests.","code":""},{"path":"https://nectar.api2r.org/reference/req_auth_api_key.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Authenticate with an API key — req_auth_api_key","text":"","code":"req_auth_api_key(req, ..., location = \"header\")"},{"path":"https://nectar.api2r.org/reference/req_auth_api_key.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Authenticate with an API key — req_auth_api_key","text":"req (httr2_request) httr2::request() object. ... Additional parameters depending location API key. parameter_name (length-1 character, \"header\" \"query\" ) name parameter use header query. api_key (length-1 character, \"header\" \"query\" ) API key use. path (length-1 character, \"cookie\" ) location cookie. location (length-1 character) API key passed. One \"header\" (default), \"query\", \"cookie\".","code":""},{"path":"https://nectar.api2r.org/reference/req_auth_api_key.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Authenticate with an API key — req_auth_api_key","text":"httr2::request() object.","code":""},{"path":"https://nectar.api2r.org/reference/req_init.html","id":null,"dir":"Reference","previous_headings":"","what":"Setup a basic API request — req_init","title":"Setup a basic API request — req_init","text":"given API, base_url user agent generally every call API. Use function prepare piece request easy reuse.","code":""},{"path":"https://nectar.api2r.org/reference/req_init.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Setup a basic API request — req_init","text":"","code":"req_init(base_url, ..., additional_user_agent = NULL)"},{"path":"https://nectar.api2r.org/reference/req_init.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Setup a basic API request — req_init","text":"base_url (length-1 character) part url shared calls API. cases may family base URLs, need choose one. ... dots future extensions must empty. additional_user_agent (length-1 character) string identify request coming . automatically include information package nectar, use provide additional details. Default NULL.","code":""},{"path":"https://nectar.api2r.org/reference/req_init.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Setup a basic API request — req_init","text":"httr2::request() object.","code":""},{"path":"https://nectar.api2r.org/reference/req_init.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Setup a basic API request — req_init","text":"","code":"req_init(\"https://example.com\") #> <httr2_request> #> GET https://example.com #> Body: empty #> Options: #> • useragent: \"httr2/1.1.0 r-curl/6.1.0 libcurl/8.5.0 nectar/0.0.0.9005 #> (https://nectar.api2r.org)\" req_init(   \"https://example.com\",   additional_user_agent = \"my_api_client (https://my.api.client)\" ) #> <httr2_request> #> GET https://example.com #> Body: empty #> Options: #> • useragent: \"my_api_client (https://my.api.client) nectar/0.0.0.9005 #> (https://nectar.api2r.org)\""},{"path":"https://nectar.api2r.org/reference/req_modify.html","id":null,"dir":"Reference","previous_headings":"","what":"Modify an API request for a particular endpoint — req_modify","title":"Modify an API request for a particular endpoint — req_modify","text":"Modify basic request API adding path path-specific properties.","code":""},{"path":"https://nectar.api2r.org/reference/req_modify.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Modify an API request for a particular endpoint — req_modify","text":"","code":"req_modify(   req,   ...,   path = NULL,   query = NULL,   body = NULL,   mime_type = NULL,   method = NULL )"},{"path":"https://nectar.api2r.org/reference/req_modify.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Modify an API request for a particular endpoint — req_modify","text":"req (httr2_request) httr2::request() object. ... dots future extensions must empty. path (character list) route API endpoint. Optionally, list character vector path one unnamed arguments (concatenated \"/\") plus named arguments glue::glue() path. query (character list) optional list character vector parameters pass query portion request. Can also include .multi argument pass httr2::req_url_query() control elements containing multiple values handled. body (multiple types) object use body request. component body path, pass fs::path() otherwise give class \"fs_path\" indicate path. mime_type (length-1 character) mime type files present body. APIs allow leave NULL guess. method (length-1 character, optional) method something GET POST, supply . Case ignored.","code":""},{"path":"https://nectar.api2r.org/reference/req_modify.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Modify an API request for a particular endpoint — req_modify","text":"httr2::request() object.","code":""},{"path":"https://nectar.api2r.org/reference/req_modify.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Modify an API request for a particular endpoint — req_modify","text":"","code":"req_base <- req_init(\"https://example.com\") req_modify(req_base, path = c(\"specific/{path}\", path = \"endpoint\")) #> <httr2_request> #> GET https://example.com/specific/endpoint #> Body: empty #> Options: #> • useragent: \"httr2/1.1.0 r-curl/6.1.0 libcurl/8.5.0 nectar/0.0.0.9005 #> (https://nectar.api2r.org)\" req_modify(req_base, query = c(\"param1\" = \"value1\", \"param2\" = \"value2\")) #> <httr2_request> #> GET https://example.com/?param1=value1&param2=value2 #> Body: empty #> Options: #> • useragent: \"httr2/1.1.0 r-curl/6.1.0 libcurl/8.5.0 nectar/0.0.0.9005 #> (https://nectar.api2r.org)\""},{"path":"https://nectar.api2r.org/reference/req_pagination_policy.html","id":null,"dir":"Reference","previous_headings":"","what":"Define a pagination policy for a request — req_pagination_policy","title":"Define a pagination policy for a request — req_pagination_policy","text":"APIs generally specified method requesting multiple pages results (sometimes two three methods). methods sometimes documented within given endpoint, sometimes documented \"top\" documentation. Use function attach pagination policy request, req_perform_opinionated() can automatically handle pagination.","code":""},{"path":"https://nectar.api2r.org/reference/req_pagination_policy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Define a pagination policy for a request — req_pagination_policy","text":"","code":"req_pagination_policy(req, pagination_fn, call = rlang::caller_env())"},{"path":"https://nectar.api2r.org/reference/req_pagination_policy.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Define a pagination policy for a request — req_pagination_policy","text":"req (httr2_request) httr2::request() object. pagination_fn function takes previous response (resp) generate next request call httr2::req_perform_iterative(). function can usually generated using one iteration helpers described httr2::iterate_with_offset(). function extracted request req_perform_opinionated() passed next_req httr2::req_perform_iterative(). call (environment) environment function called, e.g. rlang::caller_env() (default). environment mentioned error messages source error. argument particularly useful functions intended called utilities inside functions.","code":""},{"path":"https://nectar.api2r.org/reference/req_pagination_policy.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Define a pagination policy for a request — req_pagination_policy","text":"httr2::request() object.","code":""},{"path":"https://nectar.api2r.org/reference/req_pagination_policy.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Define a pagination policy for a request — req_pagination_policy","text":"","code":"req <- httr2::request(\"https://example.com\") req_pagination_policy(req, httr2::iterate_with_offset(\"page\")) #> <httr2_request> #> GET https://example.com #> Body: empty #> Policies: #> • pagination: a list"},{"path":"https://nectar.api2r.org/reference/req_perform_opinionated.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform a request with opinionated defaults — req_perform_opinionated","title":"Perform a request with opinionated defaults — req_perform_opinionated","text":"function ensures request httr2::req_retry() applied, performs request, using either httr2::req_perform_iterative() (next_req function supplied) httr2::req_perform() ().","code":""},{"path":"https://nectar.api2r.org/reference/req_perform_opinionated.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform a request with opinionated defaults — req_perform_opinionated","text":"","code":"req_perform_opinionated(   req,   ...,   next_req = choose_pagination_fn(req),   max_reqs = 2,   max_tries_per_req = 3 )"},{"path":"https://nectar.api2r.org/reference/req_perform_opinionated.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform a request with opinionated defaults — req_perform_opinionated","text":"req first request perform. ... dots future extensions must empty. next_req optional function takes previous response (resp) generate next request call httr2::req_perform_iterative(). function can usually generated using one iteration helpers described httr2::iterate_with_offset(). default, choose_pagination_fn() used check pagination policy (see req_pagination_policy()), returns NULL policy defined. max_reqs maximum number separate requests perform. Passed max_reqs argument httr2::req_perform_iterative() next_req supplied. mostly likely want change default value (2) Inf validate request works. max_tries_per_req maximum number times attempt individual request. Passed max_tries argument httr2::req_retry().","code":""},{"path":"https://nectar.api2r.org/reference/req_perform_opinionated.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform a request with opinionated defaults — req_perform_opinionated","text":"list httr2::response() objects, one request performed. list additional class nectar_responses.","code":""},{"path":"https://nectar.api2r.org/reference/req_pkg_user_agent.html","id":null,"dir":"Reference","previous_headings":"","what":"Append package information to user agent — req_pkg_user_agent","title":"Append package information to user agent — req_pkg_user_agent","text":"Add information nectar calling package (called package) user agent string.","code":""},{"path":"https://nectar.api2r.org/reference/req_pkg_user_agent.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Append package information to user agent — req_pkg_user_agent","text":"","code":"req_pkg_user_agent(   req,   pkg_name = get_pkg_name(call),   pkg_url = NULL,   call = rlang::caller_env() )"},{"path":"https://nectar.api2r.org/reference/req_pkg_user_agent.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Append package information to user agent — req_pkg_user_agent","text":"req (httr2_request) httr2::request() object. pkg_name (length-1 character) name calling package. usually automatically determined based source call. pkg_url (length-1 character) url information calling package (default NULL). call (environment) environment function called, e.g. rlang::caller_env() (default). environment mentioned error messages source error. argument particularly useful functions intended called utilities inside functions.","code":""},{"path":"https://nectar.api2r.org/reference/req_pkg_user_agent.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Append package information to user agent — req_pkg_user_agent","text":"httr2::request() object.","code":""},{"path":"https://nectar.api2r.org/reference/req_pkg_user_agent.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Append package information to user agent — req_pkg_user_agent","text":"","code":"req <- httr2::request(\"https://example.com\") req$options$useragent #> NULL req_pkg_user_agent(req)$options$useragent #> httr2/1.1.0 r-curl/6.1.0 libcurl/8.5.0 nectar/0.0.0.9005 (https://nectar.api2r.org) req_pkg_user_agent(req, \"stbl\")$options$useragent #> httr2/1.1.0 r-curl/6.1.0 libcurl/8.5.0 nectar/0.0.0.9005 (https://nectar.api2r.org) stbl/0.1.1.9000"},{"path":"https://nectar.api2r.org/reference/req_prepare.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepare a request for an API — req_prepare","title":"Prepare a request for an API — req_prepare","text":"function implements opinionated framework preparing API request. intended used inside API client package. serves wrapper around req_ family functions, httr2::request().","code":""},{"path":"https://nectar.api2r.org/reference/req_prepare.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepare a request for an API — req_prepare","text":"","code":"req_prepare(   base_url,   ...,   path = NULL,   query = NULL,   body = NULL,   mime_type = NULL,   method = NULL,   additional_user_agent = NULL,   auth_fn = NULL,   auth_args = list() )"},{"path":"https://nectar.api2r.org/reference/req_prepare.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prepare a request for an API — req_prepare","text":"base_url (length-1 character) part url shared calls API. cases may family base URLs, need choose one. ... dots future extensions must empty. path (character list) route API endpoint. Optionally, list character vector path one unnamed arguments (concatenated \"/\") plus named arguments glue::glue() path. query (character list) optional list character vector parameters pass query portion request. Can also include .multi argument pass httr2::req_url_query() control elements containing multiple values handled. body (multiple types) object use body request. component body path, pass fs::path() otherwise give class \"fs_path\" indicate path. mime_type (length-1 character) mime type files present body. APIs allow leave NULL guess. method (length-1 character, optional) method something GET POST, supply . Case ignored. additional_user_agent (length-1 character) string identify request coming . automatically include information package nectar, use provide additional details. Default NULL. auth_fn (function) function use authenticate request. default (NULL), authentication performed. auth_args (list) optional list arguments auth_fn function.","code":""},{"path":"https://nectar.api2r.org/reference/req_prepare.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prepare a request for an API — req_prepare","text":"httr2::request() object.","code":""},{"path":[]},{"path":"https://nectar.api2r.org/reference/req_tidy_policy.html","id":null,"dir":"Reference","previous_headings":"","what":"Define a tidy policy for a request — req_tidy_policy","title":"Define a tidy policy for a request — req_tidy_policy","text":"API responses generally follow structured format. Use function define policy used resp_tidy() extract relevant portion response wrangle desired format.","code":""},{"path":"https://nectar.api2r.org/reference/req_tidy_policy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Define a tidy policy for a request — req_tidy_policy","text":"","code":"req_tidy_policy(   req,   tidy_fn = resp_body_auto,   tidy_args = list(),   call = rlang::caller_env() )"},{"path":"https://nectar.api2r.org/reference/req_tidy_policy.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Define a tidy policy for a request — req_tidy_policy","text":"req (httr2_request) httr2::request() object. tidy_fn function invoked resp_tidy() tidy response. tidy_args list additional arguments pass tidy_fn. call (environment) environment function called, e.g. rlang::caller_env() (default). environment mentioned error messages source error. argument particularly useful functions intended called utilities inside functions.","code":""},{"path":"https://nectar.api2r.org/reference/req_tidy_policy.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Define a tidy policy for a request — req_tidy_policy","text":"httr2::request() object.","code":""},{"path":"https://nectar.api2r.org/reference/req_tidy_policy.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Define a tidy policy for a request — req_tidy_policy","text":"","code":"req <- httr2::request(\"https://example.com\") req_tidy_policy(req, httr2::resp_body_json, list(simplifyVector = TRUE)) #> <httr2_request> #> GET https://example.com #> Body: empty #> Policies: #> • resp_tidy: a list"},{"path":"https://nectar.api2r.org/reference/resp_body_auto.html","id":null,"dir":"Reference","previous_headings":"","what":"Automatically choose a body parser — resp_body_auto","title":"Automatically choose a body parser — resp_body_auto","text":"Use Content-Type header (extracted using httr2::resp_content_type()) response automatically choose apply body parser, httr2::resp_body_json() resp_body_csv().","code":""},{"path":"https://nectar.api2r.org/reference/resp_body_auto.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Automatically choose a body parser — resp_body_auto","text":"","code":"resp_body_auto(resp)"},{"path":"https://nectar.api2r.org/reference/resp_body_auto.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Automatically choose a body parser — resp_body_auto","text":"resp (httr2_response) single httr2::response() object (returned httr2::req_perform()).","code":""},{"path":"https://nectar.api2r.org/reference/resp_body_auto.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Automatically choose a body parser — resp_body_auto","text":"parsed response body.","code":""},{"path":"https://nectar.api2r.org/reference/resp_body_csv.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract tabular data from response body — resp_body_csv","title":"Extract tabular data from response body — resp_body_csv","text":"Extract tabular data comma-separated tab-separated format response body.","code":""},{"path":"https://nectar.api2r.org/reference/resp_body_csv.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract tabular data from response body — resp_body_csv","text":"","code":"resp_body_csv(resp, check_type = TRUE)  resp_body_tsv(resp, check_type = TRUE)"},{"path":"https://nectar.api2r.org/reference/resp_body_csv.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract tabular data from response body — resp_body_csv","text":"resp (httr2_response) single httr2::response() object (returned httr2::req_perform()). check_type (length-1 logical) Whether check response expected content type. Set FALSE response specifically tagged proper type.","code":""},{"path":"https://nectar.api2r.org/reference/resp_body_csv.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract tabular data from response body — resp_body_csv","text":"parsed response body data frame.","code":""},{"path":"https://nectar.api2r.org/reference/resp_body_separate.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract response body into list — resp_body_separate","title":"Extract response body into list — resp_body_separate","text":"Extract response body list","code":""},{"path":"https://nectar.api2r.org/reference/resp_body_separate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract response body into list — resp_body_separate","text":"","code":"resp_body_separate(resp, resp_body_fn = resp_body_auto)"},{"path":"https://nectar.api2r.org/reference/resp_body_separate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract response body into list — resp_body_separate","text":"resp (httr2_response) single httr2::response() object (returned httr2::req_perform()). resp_body_fn function extract body response. Default: resp_body_auto().","code":""},{"path":"https://nectar.api2r.org/reference/resp_body_separate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract response body into list — resp_body_separate","text":"parsed response body wrapped list(). useful things like raw vectors wish parse httr2::resps_data().","code":""},{"path":"https://nectar.api2r.org/reference/resp_parse.html","id":null,"dir":"Reference","previous_headings":"","what":"Parse one or more responses — resp_parse","title":"Parse one or more responses — resp_parse","text":"implemented full nectar framework, use resp_tidy() directly parse responses. may continue support resp_parse(), useful bridge full framework. httr2 provides two methods performing requests: httr2::req_perform(), returns single httr2::response() object, httr2::req_perform_iterative(), returns list httr2::response() objects. function automatically determines whether single response multiple responses returned, parses responses appropriately.","code":""},{"path":"https://nectar.api2r.org/reference/resp_parse.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parse one or more responses — resp_parse","text":"","code":"resp_parse(resps, ...)  # Default S3 method resp_parse(   resps,   ...,   arg = rlang::caller_arg(resps),   call = rlang::caller_env() )  # S3 method for class 'httr2_response' resp_parse(resps, ..., response_parser = resp_tidy)"},{"path":"https://nectar.api2r.org/reference/resp_parse.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parse one or more responses — resp_parse","text":"resps (httr2_response, nectar_responses, list) single httr2::response() object (returned httr2::req_perform()) list objects (returned req_perform_opinionated() httr2::req_perform_iterative()). ... Additional arguments passed response_parser function (addition resps). arg (length-1 character) argument name string. argument mentioned error messages input origin problem. call (environment) environment function called, e.g. rlang::caller_env() (default). environment mentioned error messages source error. argument particularly useful functions intended called utilities inside functions. response_parser (function) function parse server response (resp). Defaults httr2::resp_body_json(), since JSON responses common. Set NULL return raw response httr2::req_perform().","code":""},{"path":"https://nectar.api2r.org/reference/resp_parse.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Parse one or more responses — resp_parse","text":"response parsed response_parser. resps list, parsed responses concatenated possible. Unlike httr2::resps_data, function concatenate raw vector responses.","code":""},{"path":"https://nectar.api2r.org/reference/resp_tidy.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract and clean an API response — resp_tidy","title":"Extract and clean an API response — resp_tidy","text":"API responses generally follow structured format. Use function extract relevant portion response, wrangle desired format. function useful response fetched request includes tidying policy defined via req_tidy_policy().","code":""},{"path":"https://nectar.api2r.org/reference/resp_tidy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract and clean an API response — resp_tidy","text":"","code":"resp_tidy(resps)"},{"path":"https://nectar.api2r.org/reference/resp_tidy.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract and clean an API response — resp_tidy","text":"resps (httr2_response, nectar_responses, list) single httr2::response() object (returned httr2::req_perform()) list objects (returned req_perform_opinionated() httr2::req_perform_iterative()).","code":""},{"path":"https://nectar.api2r.org/reference/resp_tidy.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract and clean an API response — resp_tidy","text":"extracted cleaned response, , list responses, responses cleaned concatenated via httr2::resps_data(). default, response processed resp_body_auto().","code":""},{"path":[]},{"path":"https://nectar.api2r.org/reference/resp_tidy_json.html","id":null,"dir":"Reference","previous_headings":"","what":"Title — resp_tidy_json","title":"Title — resp_tidy_json","text":"Title","code":""},{"path":"https://nectar.api2r.org/reference/resp_tidy_json.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Title — resp_tidy_json","text":"","code":"resp_tidy_json(resp, spec = NULL, unspecified = \"list\", subset_path = NULL)"},{"path":"https://nectar.api2r.org/reference/resp_tidy_json.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Title — resp_tidy_json","text":"resp (httr2_response) single httr2::response() object (returned httr2::req_perform()). spec (tspec NULL) specification used tibblify::tibblify() parse extracted body resp. spec NULL (default), tibblify::tibblify() attempt guess spec. unspecified (length-1 character) string describes happens extracted body resp contains fields specified spec. tibblify::tibblify() defaults NULL value, set list body still parse resp contains extra data without throwing errors. subset_path (character) optional vector indicating path \"real\" object within body resp. example, many APIs return body information status response, cache information, perhaps pagination information, actual data field data. desired part response body data$objects, value argument c(\"data\", \"object\").","code":""},{"path":"https://nectar.api2r.org/reference/resp_tidy_json.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Title — resp_tidy_json","text":"tibblified response body.","code":""},{"path":"https://nectar.api2r.org/reference/stabilize_string.html","id":null,"dir":"Reference","previous_headings":"","what":"Ensure an argument is a length-1 character — stabilize_string","title":"Ensure an argument is a length-1 character — stabilize_string","text":"Calls APIs often require string argument. function ensures arguments length-1, non-NA character vectors, length-1, non-NA vectors can coerced character vectors. intended ensure calls API fail predictable errors, thus avoiding unnecessary internet traffic.","code":""},{"path":"https://nectar.api2r.org/reference/stabilize_string.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Ensure an argument is a length-1 character — stabilize_string","text":"","code":"stabilize_string(   x,   ...,   regex = NULL,   arg = rlang::caller_arg(x),   call = rlang::caller_env() )"},{"path":"https://nectar.api2r.org/reference/stabilize_string.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Ensure an argument is a length-1 character — stabilize_string","text":"x argument stabilize. ... Arguments passed stbl::stabilize_chr_scalar x_class Character. class name x use error messages. Use remove special class x checking coercion, want error message match original class. regex Character scalar. optional regex pattern compare value(s) x . complex regex pattern throws error, try installing stringi package install.packages(\"stringi\"). arg argument name string. argument mentioned error messages input origin problem. call execution environment currently running function, e.g. caller_env(). function mentioned error messages source error. See call argument abort() information.","code":""},{"path":"https://nectar.api2r.org/reference/stabilize_string.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Ensure an argument is a length-1 character — stabilize_string","text":"x coerced length-1 character vector, possible.","code":""},{"path":"https://nectar.api2r.org/reference/stabilize_string.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Ensure an argument is a length-1 character — stabilize_string","text":"","code":"stabilize_string(\"a\") #> [1] \"a\" stabilize_string(1.1) #> [1] \"1.1\" x <- letters try(stabilize_string(x)) #> Error in eval(expr, envir) :  #>   `x` must be a single <character>. #> ✖ `x` has 26 values. x <- NULL try(stabilize_string(x)) #> Error in eval(expr, envir) : `x` must not be <NULL>. x <- character() try(stabilize_string(x)) #> Error in eval(expr, envir) :  #>   `x` must be a single <character (non-empty)>. #> ✖ `x` has no values. x <- NA try(stabilize_string(x)) #> Error in eval(expr, envir) : `x` must not contain NA values. #> • NA locations: 1"},{"path":"https://nectar.api2r.org/reference/url_normalize.html","id":null,"dir":"Reference","previous_headings":"","what":"Normalize a URL — url_normalize","title":"Normalize a URL — url_normalize","text":"function normalizes URL adding trailing slash base missing. mainly testing comparisons.","code":""},{"path":"https://nectar.api2r.org/reference/url_normalize.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Normalize a URL — url_normalize","text":"","code":"url_normalize(url)"},{"path":"https://nectar.api2r.org/reference/url_normalize.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Normalize a URL — url_normalize","text":"url URL normalize.","code":""},{"path":"https://nectar.api2r.org/reference/url_normalize.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Normalize a URL — url_normalize","text":"normalized URL","code":""},{"path":"https://nectar.api2r.org/reference/url_normalize.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Normalize a URL — url_normalize","text":"","code":"identical(   url_normalize(\"https://example.com\"),   url_normalize(\"https://example.com/\") ) #> [1] TRUE identical(   url_normalize(\"https://example.com?param=value\"),   url_normalize(\"https://example.com/?param=value\") ) #> [1] TRUE"},{"path":"https://nectar.api2r.org/reference/url_path_append.html","id":null,"dir":"Reference","previous_headings":"","what":"Add path elements to a URL — url_path_append","title":"Add path elements to a URL — url_path_append","text":"Append zero path elements URL without duplicating \"/\" characters. Based httr2::req_url_path_append().","code":""},{"path":"https://nectar.api2r.org/reference/url_path_append.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add path elements to a URL — url_path_append","text":"","code":"url_path_append(url, ...)"},{"path":"https://nectar.api2r.org/reference/url_path_append.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add path elements to a URL — url_path_append","text":"url URL modify. ... Path elements append, strings.","code":""},{"path":"https://nectar.api2r.org/reference/url_path_append.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add path elements to a URL — url_path_append","text":"modified URL.","code":""},{"path":"https://nectar.api2r.org/reference/url_path_append.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add path elements to a URL — url_path_append","text":"","code":"url_path_append(\"https://example.com\", \"api\", \"v1\", \"users\") #> [1] \"https://example.com/api/v1/users\" url_path_append(\"https://example.com/\", \"/api\", \"/v1\", \"/users\") #> [1] \"https://example.com/api/v1/users\" url_path_append(\"https://example.com/\", \"/api/v1/users\") #> [1] \"https://example.com/api/v1/users\""}]
