[{"path":[]},{"path":"https://jonthegeek.github.io/nectar/CODE_OF_CONDUCT.html","id":"our-pledge","dir":"","previous_headings":"","what":"Our Pledge","title":"Contributor Covenant Code of Conduct","text":"members, contributors, leaders pledge make participation community harassment-free experience everyone, regardless age, body size, visible invisible disability, ethnicity, sex characteristics, gender identity expression, level experience, education, socio-economic status, nationality, personal appearance, race, caste, color, religion, sexual identity orientation. pledge act interact ways contribute open, welcoming, diverse, inclusive, healthy community.","code":""},{"path":"https://jonthegeek.github.io/nectar/CODE_OF_CONDUCT.html","id":"our-standards","dir":"","previous_headings":"","what":"Our Standards","title":"Contributor Covenant Code of Conduct","text":"Examples behavior contributes positive environment community include: Demonstrating empathy kindness toward people respectful differing opinions, viewpoints, experiences Giving gracefully accepting constructive feedback Accepting responsibility apologizing affected mistakes, learning experience Focusing best just us individuals, overall community Examples unacceptable behavior include: use sexualized language imagery, sexual attention advances kind Trolling, insulting derogatory comments, personal political attacks Public private harassment Publishing others’ private information, physical email address, without explicit permission conduct reasonably considered inappropriate professional setting","code":""},{"path":"https://jonthegeek.github.io/nectar/CODE_OF_CONDUCT.html","id":"enforcement-responsibilities","dir":"","previous_headings":"","what":"Enforcement Responsibilities","title":"Contributor Covenant Code of Conduct","text":"Community leaders responsible clarifying enforcing standards acceptable behavior take appropriate fair corrective action response behavior deem inappropriate, threatening, offensive, harmful. Community leaders right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct, communicate reasons moderation decisions appropriate.","code":""},{"path":"https://jonthegeek.github.io/nectar/CODE_OF_CONDUCT.html","id":"scope","dir":"","previous_headings":"","what":"Scope","title":"Contributor Covenant Code of Conduct","text":"Code Conduct applies within community spaces, also applies individual officially representing community public spaces. Examples representing community include using official e-mail address, posting via official social media account, acting appointed representative online offline event.","code":""},{"path":"https://jonthegeek.github.io/nectar/CODE_OF_CONDUCT.html","id":"enforcement","dir":"","previous_headings":"","what":"Enforcement","title":"Contributor Covenant Code of Conduct","text":"Instances abusive, harassing, otherwise unacceptable behavior may reported community leaders responsible enforcement jonthegeek@gmail.com. complaints reviewed investigated promptly fairly. community leaders obligated respect privacy security reporter incident.","code":""},{"path":"https://jonthegeek.github.io/nectar/CODE_OF_CONDUCT.html","id":"enforcement-guidelines","dir":"","previous_headings":"","what":"Enforcement Guidelines","title":"Contributor Covenant Code of Conduct","text":"Community leaders follow Community Impact Guidelines determining consequences action deem violation Code Conduct:","code":""},{"path":"https://jonthegeek.github.io/nectar/CODE_OF_CONDUCT.html","id":"id_1-correction","dir":"","previous_headings":"Enforcement Guidelines","what":"1. Correction","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Use inappropriate language behavior deemed unprofessional unwelcome community. Consequence: private, written warning community leaders, providing clarity around nature violation explanation behavior inappropriate. public apology may requested.","code":""},{"path":"https://jonthegeek.github.io/nectar/CODE_OF_CONDUCT.html","id":"id_2-warning","dir":"","previous_headings":"Enforcement Guidelines","what":"2. Warning","title":"Contributor Covenant Code of Conduct","text":"Community Impact: violation single incident series actions. Consequence: warning consequences continued behavior. interaction people involved, including unsolicited interaction enforcing Code Conduct, specified period time. includes avoiding interactions community spaces well external channels like social media. Violating terms may lead temporary permanent ban.","code":""},{"path":"https://jonthegeek.github.io/nectar/CODE_OF_CONDUCT.html","id":"id_3-temporary-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"3. Temporary Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: serious violation community standards, including sustained inappropriate behavior. Consequence: temporary ban sort interaction public communication community specified period time. public private interaction people involved, including unsolicited interaction enforcing Code Conduct, allowed period. Violating terms may lead permanent ban.","code":""},{"path":"https://jonthegeek.github.io/nectar/CODE_OF_CONDUCT.html","id":"id_4-permanent-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"4. Permanent Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Demonstrating pattern violation community standards, including sustained inappropriate behavior, harassment individual, aggression toward disparagement classes individuals. Consequence: permanent ban sort public interaction within community.","code":""},{"path":"https://jonthegeek.github.io/nectar/CODE_OF_CONDUCT.html","id":"attribution","dir":"","previous_headings":"","what":"Attribution","title":"Contributor Covenant Code of Conduct","text":"Code Conduct adapted Contributor Covenant, version 2.1, available https://www.contributor-covenant.org/version/2/1/code_of_conduct.html. Community Impact Guidelines inspired [Mozilla’s code conduct enforcement ladder][https://github.com/mozilla/inclusion]. answers common questions code conduct, see FAQ https://www.contributor-covenant.org/faq. Translations available https://www.contributor-covenant.org/translations.","code":""},{"path":"https://jonthegeek.github.io/nectar/CONTRIBUTING.html","id":null,"dir":"","previous_headings":"","what":"Contributing to nectar","title":"Contributing to nectar","text":"outlines propose change nectar.","code":""},{"path":"https://jonthegeek.github.io/nectar/CONTRIBUTING.html","id":"fixing-typos","dir":"","previous_headings":"","what":"Fixing typos","title":"Contributing to nectar","text":"can fix typos, spelling mistakes, grammatical errors documentation directly using GitHub web interface, long changes made source file. generally means ’ll need edit roxygen2 comments .R, .Rd file. can find .R file generates .Rd reading comment first line.","code":""},{"path":"https://jonthegeek.github.io/nectar/CONTRIBUTING.html","id":"bigger-changes","dir":"","previous_headings":"","what":"Bigger changes","title":"Contributing to nectar","text":"want make bigger change, ’s good idea first file issue make sure someone team agrees ’s needed. ’ve found bug, please file issue illustrates bug minimal reprex (also help write unit test, needed).","code":""},{"path":"https://jonthegeek.github.io/nectar/CONTRIBUTING.html","id":"pull-request-process","dir":"","previous_headings":"Bigger changes","what":"Pull request process","title":"Contributing to nectar","text":"Fork package clone onto computer. haven’t done , recommend using usethis::create_from_github(\"jonthegeek/nectar\", fork = TRUE). Install development dependencies devtools::install_dev_deps(), make sure package passes R CMD check running devtools::check(). R CMD check doesn’t pass cleanly, ’s good idea ask help continuing. Create Git branch pull request (PR). recommend using usethis::pr_init(\"brief-description--change\"). Make changes, commit git, create PR running usethis::pr_push(), following prompts browser. title PR briefly describe change. body PR contain Fixes #issue-number. user-facing changes, add bullet top NEWS.md (.e. just first header). Follow style described https://style.tidyverse.org/news.html.","code":""},{"path":"https://jonthegeek.github.io/nectar/CONTRIBUTING.html","id":"code-style","dir":"","previous_headings":"Bigger changes","what":"Code style","title":"Contributing to nectar","text":"New code follow tidyverse style guide. can use styler package apply styles, please don’t restyle code nothing PR. use roxygen2, Markdown syntax, documentation. use testthat unit tests. Contributions test cases included easier accept.","code":""},{"path":"https://jonthegeek.github.io/nectar/CONTRIBUTING.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"Contributing to nectar","text":"Please note nectar project released Contributor Code Conduct. contributing project agree abide terms.","code":""},{"path":"https://jonthegeek.github.io/nectar/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2023 nectar authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://jonthegeek.github.io/nectar/SUPPORT.html","id":null,"dir":"","previous_headings":"","what":"Getting help with nectar","title":"Getting help with nectar","text":"Thanks using nectar! filing issue, places explore pieces put together make process smooth possible.","code":""},{"path":"https://jonthegeek.github.io/nectar/SUPPORT.html","id":"make-a-reprex","dir":"","previous_headings":"","what":"Make a reprex","title":"Getting help with nectar","text":"Start making minimal reproducible example using reprex package. haven’t heard used reprex , ’re treat! Seriously, reprex make R-question-asking endeavors easier (pretty insane ROI five ten minutes ’ll take learn ’s ). additional reprex pointers, check Get help! section tidyverse site.","code":""},{"path":"https://jonthegeek.github.io/nectar/SUPPORT.html","id":"where-to-ask","dir":"","previous_headings":"","what":"Where to ask?","title":"Getting help with nectar","text":"Armed reprex, next step figure ask. ’s question: ’s best ask R4DS Online Learning Community Slack. options include Posit Community, StackOverflow. people answer questions. ’s bug: ’re right place, file issue. ’re sure: let community help figure ! problem bug feature request, can easily return report . opening new issue, sure search issues pull requests make sure bug hasn’t reported /already fixed development version. default, search pre-populated :issue :open. can edit qualifiers (e.g. :pr, :closed) needed. example, ’d simply remove :open search issues repo, open closed.","code":""},{"path":"https://jonthegeek.github.io/nectar/SUPPORT.html","id":"what-happens-next","dir":"","previous_headings":"","what":"What happens next?","title":"Getting help with nectar","text":"’ll try look issue soon can, packages maintained volunteers. good reprex particularly important might weeks months initial report start working . can’t reproduce bug, can’t fix !","code":""},{"path":"https://jonthegeek.github.io/nectar/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Jon Harmon. Author, maintainer, copyright holder. R Consortium. Funder.","code":""},{"path":"https://jonthegeek.github.io/nectar/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Harmon J (2023). nectar: Framework Web API Packages. https://jonthegeek.github.io/nectar/, https://github.com/jonthegeek/nectar.","code":"@Manual{,   title = {nectar: A Framework for Web API Packages},   author = {Jon Harmon},   year = {2023},   note = {https://jonthegeek.github.io/nectar/, https://github.com/jonthegeek/nectar}, }"},{"path":"https://jonthegeek.github.io/nectar/index.html","id":"nectar-","dir":"","previous_headings":"","what":"A Framework for Web API Packages","title":"A Framework for Web API Packages","text":"opinionated framework use within api-wrapping R packages.","code":""},{"path":"https://jonthegeek.github.io/nectar/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"A Framework for Web API Packages","text":"can install development version nectar GitHub :","code":"# install.packages(\"remotes\") remotes::install_github(\"jonthegeek/nectar\")"},{"path":"https://jonthegeek.github.io/nectar/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"A Framework for Web API Packages","text":"Add usage information examples .","code":""},{"path":"https://jonthegeek.github.io/nectar/index.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"A Framework for Web API Packages","text":"Please note nectar project released Contributor Code Conduct. contributing project, agree abide terms.","code":""},{"path":"https://jonthegeek.github.io/nectar/reference/api_browse_oauth_app.html","id":null,"dir":"Reference","previous_headings":"","what":"Visit an OAuth client management page — api_browse_oauth_app","title":"Visit an OAuth client management page — api_browse_oauth_app","text":"Open url HTML browser. thin wrapper around utils::browseURL().","code":""},{"path":"https://jonthegeek.github.io/nectar/reference/api_browse_oauth_app.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Visit an OAuth client management page — api_browse_oauth_app","text":"","code":"api_browse_oauth_app(app_mgmt_url)"},{"path":"https://jonthegeek.github.io/nectar/reference/api_browse_oauth_app.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Visit an OAuth client management page — api_browse_oauth_app","text":"app_mgmt_url page client can managed.","code":""},{"path":"https://jonthegeek.github.io/nectar/reference/api_browse_oauth_app.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Visit an OAuth client management page — api_browse_oauth_app","text":"app_mgmt_url, invisibly.","code":""},{"path":"https://jonthegeek.github.io/nectar/reference/api_browse_oauth_app.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Visit an OAuth client management page — api_browse_oauth_app","text":"","code":"api_browse_oauth_app(\"https://example.com\")"},{"path":"https://jonthegeek.github.io/nectar/reference/api_client.html","id":null,"dir":"Reference","previous_headings":"","what":"Construct an OAuth client — api_client","title":"Construct an OAuth client — api_client","text":"wrapper around httr2::oauth_client() stricter validation.","code":""},{"path":"https://jonthegeek.github.io/nectar/reference/api_client.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Construct an OAuth client — api_client","text":"","code":"api_client(client_id = \"\", client_secret = \"\", api_token_url)"},{"path":"https://jonthegeek.github.io/nectar/reference/api_client.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Construct an OAuth client — api_client","text":"client_id OAuth App client ID. recommend users save environment variable, YOUR_API_CLIENT_ID. client_secret Zoom OAuth App client secret. recommend users save environment variable, YOUR_API_CLIENT_SECRET. api_token_url URL retrieve access token API part OAuth flow.","code":""},{"path":"https://jonthegeek.github.io/nectar/reference/api_client.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Construct an OAuth client — api_client","text":"OAuth client: S3 list class httr2_oauth_client.","code":""},{"path":"https://jonthegeek.github.io/nectar/reference/api_client.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Construct an OAuth client — api_client","text":"","code":"# api_client(\"your_client_id\", \"your_client_secret\", \"https://example.com\")"},{"path":"https://jonthegeek.github.io/nectar/reference/call_api.html","id":null,"dir":"Reference","previous_headings":"","what":"Send a request to an API — call_api","title":"Send a request to an API — call_api","text":"function implements opinionated framework making API calls. intended used inside API client package. serves wrapper around req_ family functions, httr2::request().","code":""},{"path":"https://jonthegeek.github.io/nectar/reference/call_api.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Send a request to an API — call_api","text":"","code":"call_api(   base_url,   path = NULL,   query = NULL,   body = NULL,   mime_type = NULL,   method = NULL,   api_case = c(\"snake_case\", \"camelCase\", \"UpperCamel\", \"SCREAMING_SNAKE\", \"alllower\",     \"ALLUPPER\", \"lowerUPPER\", \"UPPERlower\", \"Sentence case\", \"Title Case\"),   response_parser = httr2::resp_body_json,   response_parser_args = list(),   user_agent = \"nectar (https://jonthegeek.github.io/nectar/)\" )"},{"path":"https://jonthegeek.github.io/nectar/reference/call_api.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Send a request to an API — call_api","text":"base_url part url shared calls API. cases may family base URLs, need choose one. path route API endpoint. Optionally, list path plus variables glue::glue() path. query optional list parameters pass query portion request. body object use body request. component body path, pass fs::path() otherwise give class \"fs_path\" indicate path. mime_type character scalar indicating mime type files present body. APIs allow leave NULL guess. method method something GET POST, supply . Case ignored. api_case case standard used API. possible values self-descriptive. Defaults \"snake_case\". response_parser function use parse server response. Defaults httr2::resp_body_json(), since JSON responses common. Set NULL return raw response httr2::req_perform(). response_parser_args optional list arguments response_parser function. user_agent string identify request coming . polite set user agent identify package, \"MyPackage (https://mypackage.com)\".","code":""},{"path":"https://jonthegeek.github.io/nectar/reference/call_api.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Send a request to an API — call_api","text":"response API, parsed response_parser.","code":""},{"path":"https://jonthegeek.github.io/nectar/reference/compact_nested_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Discard empty elements — compact_nested_list","title":"Discard empty elements — compact_nested_list","text":"Discard empty elements nested lists.","code":""},{"path":"https://jonthegeek.github.io/nectar/reference/compact_nested_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Discard empty elements — compact_nested_list","text":"","code":"compact_nested_list(lst)"},{"path":"https://jonthegeek.github.io/nectar/reference/compact_nested_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Discard empty elements — compact_nested_list","text":"lst (nested) list filter.","code":""},{"path":"https://jonthegeek.github.io/nectar/reference/compact_nested_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Discard empty elements — compact_nested_list","text":"list, minus empty elements branches.","code":""},{"path":"https://jonthegeek.github.io/nectar/reference/compact_nested_list.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Discard empty elements — compact_nested_list","text":"","code":"x <- list(   a = list(     b = letters,     c = NULL,     d = 1:5   ),   e = NULL,   f = 1:3 ) compact_nested_list(x) #> $a #> $a$b #>  [1] \"a\" \"b\" \"c\" \"d\" \"e\" \"f\" \"g\" \"h\" \"i\" \"j\" \"k\" \"l\" \"m\" \"n\" \"o\" \"p\" \"q\" \"r\" \"s\" #> [20] \"t\" \"u\" \"v\" \"w\" \"x\" \"y\" \"z\" #>  #> $a$d #> [1] 1 2 3 4 5 #>  #>  #> $f #> [1] 1 2 3 #>"},{"path":"https://jonthegeek.github.io/nectar/reference/dot-add_body.html","id":null,"dir":"Reference","previous_headings":"","what":"Add the body to the request — .add_body","title":"Add the body to the request — .add_body","text":"Add body request","code":""},{"path":"https://jonthegeek.github.io/nectar/reference/dot-add_body.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add the body to the request — .add_body","text":"","code":".add_body(req, body)"},{"path":"https://jonthegeek.github.io/nectar/reference/dot-add_body.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add the body to the request — .add_body","text":"req httr2::request() object. body object use body request. component body path, pass fs::path() otherwise give class \"fs_path\" indicate path.","code":""},{"path":"https://jonthegeek.github.io/nectar/reference/dot-add_body.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add the body to the request — .add_body","text":"request body appropriately added.","code":""},{"path":"https://jonthegeek.github.io/nectar/reference/dot-compact_nested_list_impl.html","id":null,"dir":"Reference","previous_headings":"","what":"Discard empty elements — .compact_nested_list_impl","title":"Discard empty elements — .compact_nested_list_impl","text":"Discard empty elements","code":""},{"path":"https://jonthegeek.github.io/nectar/reference/dot-compact_nested_list_impl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Discard empty elements — .compact_nested_list_impl","text":"","code":".compact_nested_list_impl(lst, depth = 1L)"},{"path":"https://jonthegeek.github.io/nectar/reference/dot-compact_nested_list_impl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Discard empty elements — .compact_nested_list_impl","text":"lst (nested) list filter. depth current recursion depth.","code":""},{"path":"https://jonthegeek.github.io/nectar/reference/dot-compact_nested_list_impl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Discard empty elements — .compact_nested_list_impl","text":"list, minus empty elements branches.","code":""},{"path":"https://jonthegeek.github.io/nectar/reference/dot-enforce_name_case_impl.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply a case standard to all names of an object — .enforce_name_case_impl","title":"Apply a case standard to all names of an object — .enforce_name_case_impl","text":"Apply case standard names object","code":""},{"path":"https://jonthegeek.github.io/nectar/reference/dot-enforce_name_case_impl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply a case standard to all names of an object — .enforce_name_case_impl","text":"","code":".enforce_name_case_impl(x, case_function, depth = 1L)"},{"path":"https://jonthegeek.github.io/nectar/reference/dot-enforce_name_case_impl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Apply a case standard to all names of an object — .enforce_name_case_impl","text":"x object update. case_function function apply. depth current recursion depth.","code":""},{"path":"https://jonthegeek.github.io/nectar/reference/dot-enforce_name_case_impl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Apply a case standard to all names of an object — .enforce_name_case_impl","text":"input object names converted specified case standard.","code":""},{"path":"https://jonthegeek.github.io/nectar/reference/dot-oauth-parameters.html","id":null,"dir":"Reference","previous_headings":"","what":"OAuth parameters — .oauth-parameters","title":"OAuth parameters — .oauth-parameters","text":"parameters used multiple authentication functions. define consistent.","code":""},{"path":"https://jonthegeek.github.io/nectar/reference/dot-oauth-parameters.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"OAuth parameters — .oauth-parameters","text":"api_token_url URL retrieve access token API part OAuth flow. cache_disk access token cached disk? Cached tokens encrypted automatically deleted 30 days creation. See httr2::req_oauth_auth_code(). cache_key authenticating multiple users using client, use key differentiate users. client_id OAuth App client ID. recommend users save environment variable, YOUR_API_CLIENT_ID. client_secret Zoom OAuth App client secret. recommend users save environment variable, YOUR_API_CLIENT_SECRET. force logical indicating whether force refresh token. refresh_token refresh token associated client. request httr2::request(). scopes character vector allowed scopes. token API httr2::oauth_token().","code":""},{"path":"https://jonthegeek.github.io/nectar/reference/dot-prepare_body.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepare the body of a request — .prepare_body","title":"Prepare the body of a request — .prepare_body","text":"Prepare body request","code":""},{"path":"https://jonthegeek.github.io/nectar/reference/dot-prepare_body.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepare the body of a request — .prepare_body","text":"","code":".prepare_body(   body,   api_case = c(\"snake_case\", \"camelCase\", \"UpperCamel\", \"SCREAMING_SNAKE\", \"alllower\",     \"ALLUPPER\", \"lowerUPPER\", \"UPPERlower\", \"Sentence case\", \"Title Case\"),   mime_type = NULL )"},{"path":"https://jonthegeek.github.io/nectar/reference/dot-prepare_body.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prepare the body of a request — .prepare_body","text":"body object use body request. component body path, pass fs::path() otherwise give class \"fs_path\" indicate path. api_case case standard used API. possible values self-descriptive. Defaults \"snake_case\". mime_type character scalar indicating mime type files present body. APIs allow leave NULL guess.","code":""},{"path":"https://jonthegeek.github.io/nectar/reference/dot-prepare_body.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prepare the body of a request — .prepare_body","text":"prepared body list object \"json\" \"multipart\" subclass.","code":""},{"path":"https://jonthegeek.github.io/nectar/reference/dot-prepare_body_part.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepare a multipart body part — .prepare_body_part","title":"Prepare a multipart body part — .prepare_body_part","text":"Prepare multipart body part","code":""},{"path":"https://jonthegeek.github.io/nectar/reference/dot-prepare_body_part.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepare a multipart body part — .prepare_body_part","text":"","code":".prepare_body_part(body_part, mime_type = NULL)"},{"path":"https://jonthegeek.github.io/nectar/reference/dot-prepare_body_part.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prepare a multipart body part — .prepare_body_part","text":"body_part One piece multipart body. mime_type character scalar indicating mime type files present body. APIs allow leave NULL guess.","code":""},{"path":"https://jonthegeek.github.io/nectar/reference/dot-prepare_body_part.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prepare a multipart body part — .prepare_body_part","text":"character raw vector post.","code":""},{"path":"https://jonthegeek.github.io/nectar/reference/dot-prepare_request.html","id":null,"dir":"Reference","previous_headings":"","what":"Combine request pieces — .prepare_request","title":"Combine request pieces — .prepare_request","text":"Combine request pieces","code":""},{"path":"https://jonthegeek.github.io/nectar/reference/dot-prepare_request.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Combine request pieces — .prepare_request","text":"","code":".prepare_request(   base_url,   path = NULL,   query = NULL,   body = NULL,   method = NULL,   api_case = NULL,   mime_type = NULL,   user_agent = NULL )"},{"path":"https://jonthegeek.github.io/nectar/reference/dot-prepare_request.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Combine request pieces — .prepare_request","text":"base_url part url shared calls API. cases may family base URLs, need choose one. path route API endpoint. Optionally, list path plus variables glue::glue() path. query optional list parameters pass query portion request. body object use body request. component body path, pass fs::path() otherwise give class \"fs_path\" indicate path. method method something GET POST, supply . Case ignored. api_case case standard used API. possible values self-descriptive. Defaults \"snake_case\". mime_type character scalar indicating mime type files present body. APIs allow leave NULL guess. user_agent string identify request coming . polite set user agent identify package, \"MyPackage (https://mypackage.com)\".","code":""},{"path":"https://jonthegeek.github.io/nectar/reference/dot-prepare_request.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Combine request pieces — .prepare_request","text":"httr2::request() object.","code":""},{"path":"https://jonthegeek.github.io/nectar/reference/dot-shared-parameters.html","id":null,"dir":"Reference","previous_headings":"","what":"Parameters used in multiple functions — .shared-parameters","title":"Parameters used in multiple functions — .shared-parameters","text":"Reused parameter definitions gathered easier editing.","code":""},{"path":"https://jonthegeek.github.io/nectar/reference/dot-shared-parameters.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parameters used in multiple functions — .shared-parameters","text":"api_case case standard used API. possible values self-descriptive. Defaults \"snake_case\". base_url part url shared calls API. cases may family base URLs, need choose one. body object use body request. component body path, pass fs::path() otherwise give class \"fs_path\" indicate path. case case standard apply. possible values self-descriptive. Defaults \"snake_case\". depth current recursion depth. path route API endpoint. Optionally, list path plus variables glue::glue() path. method method something GET POST, supply . Case ignored. mime_type character scalar indicating mime type files present body. APIs allow leave NULL guess. query optional list parameters pass query portion request. req httr2::request() object. user_agent string identify request coming . polite set user agent identify package, \"MyPackage (https://mypackage.com)\". x object update.","code":""},{"path":"https://jonthegeek.github.io/nectar/reference/dot-shared-request.html","id":null,"dir":"Reference","previous_headings":"","what":"Returns from request functions — .shared-request","title":"Returns from request functions — .shared-request","text":"Returns request functions","code":""},{"path":"https://jonthegeek.github.io/nectar/reference/dot-shared-request.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Returns from request functions — .shared-request","text":"httr2::request() object.","code":""},{"path":"https://jonthegeek.github.io/nectar/reference/dot-to_lower_snakeless.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert strings to lowercase without underscore — .to_lower_snakeless","title":"Convert strings to lowercase without underscore — .to_lower_snakeless","text":"Convert strings lowercase without underscore","code":""},{"path":"https://jonthegeek.github.io/nectar/reference/dot-to_lower_snakeless.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert strings to lowercase without underscore — .to_lower_snakeless","text":"","code":".to_lower_snakeless(x)"},{"path":"https://jonthegeek.github.io/nectar/reference/dot-to_lower_snakeless.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert strings to lowercase without underscore — .to_lower_snakeless","text":"x object update.","code":""},{"path":"https://jonthegeek.github.io/nectar/reference/dot-to_lower_snakeless.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert strings to lowercase without underscore — .to_lower_snakeless","text":"string, lowercase, underscores removed.","code":""},{"path":"https://jonthegeek.github.io/nectar/reference/dot-to_upper_snakeless.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert strings to uppercase without underscore — .to_upper_snakeless","title":"Convert strings to uppercase without underscore — .to_upper_snakeless","text":"Convert strings uppercase without underscore","code":""},{"path":"https://jonthegeek.github.io/nectar/reference/dot-to_upper_snakeless.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert strings to uppercase without underscore — .to_upper_snakeless","text":"","code":".to_upper_snakeless(x)"},{"path":"https://jonthegeek.github.io/nectar/reference/dot-to_upper_snakeless.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert strings to uppercase without underscore — .to_upper_snakeless","text":"x object update.","code":""},{"path":"https://jonthegeek.github.io/nectar/reference/dot-to_upper_snakeless.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert strings to uppercase without underscore — .to_upper_snakeless","text":"string, uppercase, underscores removed.","code":""},{"path":"https://jonthegeek.github.io/nectar/reference/enforce_name_case.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply a case standard to all names of an object — enforce_name_case","title":"Apply a case standard to all names of an object — enforce_name_case","text":"Standardize names object follow case standard, \"snake_case\" (lowercase, words separated \"_\") \"camelCase\" (first letter lowercase, first letter subsequent words uppercase). Resulting objects identical input objects, names standardized given case.","code":""},{"path":"https://jonthegeek.github.io/nectar/reference/enforce_name_case.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply a case standard to all names of an object — enforce_name_case","text":"","code":"enforce_name_case(   x,   case = c(\"snake_case\", \"camelCase\", \"UpperCamel\", \"SCREAMING_SNAKE\", \"alllower\",     \"ALLUPPER\", \"lowerUPPER\", \"UPPERlower\", \"Sentence case\", \"Title Case\") )"},{"path":"https://jonthegeek.github.io/nectar/reference/enforce_name_case.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Apply a case standard to all names of an object — enforce_name_case","text":"x object update. case case standard apply. possible values self-descriptive. Defaults \"snake_case\".","code":""},{"path":"https://jonthegeek.github.io/nectar/reference/enforce_name_case.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Apply a case standard to all names of an object — enforce_name_case","text":"input object names converted specified case standard.","code":""},{"path":"https://jonthegeek.github.io/nectar/reference/enforce_name_case.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Apply a case standard to all names of an object — enforce_name_case","text":"","code":"x <- list(   fiRsT_laBel = c(firsT_Label_1 = 1, firsT_Label_2 = 2), SECond_labEL = 3 ) enforce_name_case(x, \"snake_case\") #> $fi_rs_t_la_bel #> firs_t_label_1 firs_t_label_2  #>              1              2  #>  #> $se_cond_lab_el #> [1] 3 #>  enforce_name_case(x, \"camelCase\") #> $fiRsTLaBel #> firsTLabel1 firsTLabel2  #>           1           2  #>  #> $seCondLabEl #> [1] 3 #>  enforce_name_case(x, \"UpperCamel\") #> $FiRsTLaBel #> FirsTLabel1 FirsTLabel2  #>           1           2  #>  #> $SeCondLabEl #> [1] 3 #>  enforce_name_case(x, \"SCREAMING_SNAKE\") #> $FI_RS_T_LA_BEL #> FIRS_T_LABEL_1 FIRS_T_LABEL_2  #>              1              2  #>  #> $SE_COND_LAB_EL #> [1] 3 #>"},{"path":"https://jonthegeek.github.io/nectar/reference/nectar-package.html","id":null,"dir":"Reference","previous_headings":"","what":"nectar: A Framework for Web API Packages — nectar-package","title":"nectar: A Framework for Web API Packages — nectar-package","text":"opinionated framework use within api-wrapping R packages.","code":""},{"path":[]},{"path":"https://jonthegeek.github.io/nectar/reference/nectar-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"nectar: A Framework for Web API Packages — nectar-package","text":"Maintainer: Jon Harmon jonthegeek@gmail.com (ORCID) [copyright holder] contributors: R Consortium [funder]","code":""},{"path":"https://jonthegeek.github.io/nectar/reference/req_body_auto.html","id":null,"dir":"Reference","previous_headings":"","what":"Send data in request body — req_body_auto","title":"Send data in request body — req_body_auto","text":"Automatically choose httr2::req_body_json() httr2::req_body_multipart() based content body. currently experimental needs tested APIs.","code":""},{"path":"https://jonthegeek.github.io/nectar/reference/req_body_auto.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Send data in request body — req_body_auto","text":"","code":"req_body_auto(   req,   body,   api_case = c(\"snake_case\", \"camelCase\", \"UpperCamel\", \"SCREAMING_SNAKE\", \"alllower\",     \"ALLUPPER\", \"lowerUPPER\", \"UPPERlower\", \"Sentence case\", \"Title Case\"),   mime_type = NULL )"},{"path":"https://jonthegeek.github.io/nectar/reference/req_body_auto.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Send data in request body — req_body_auto","text":"req httr2::request() object. body object use body request. component body path, pass fs::path() otherwise give class \"fs_path\" indicate path. api_case case standard used API. possible values self-descriptive. Defaults \"snake_case\". mime_type character scalar indicating mime type files present body. APIs allow leave NULL guess.","code":""},{"path":"https://jonthegeek.github.io/nectar/reference/req_body_auto.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Send data in request body — req_body_auto","text":"modified HTTP request.","code":""},{"path":"https://jonthegeek.github.io/nectar/reference/to_csv_scalar.html","id":null,"dir":"Reference","previous_headings":"","what":"Coerce to comma-separated scalar — to_csv_scalar","title":"Coerce to comma-separated scalar — to_csv_scalar","text":"Collapse character-like objects single comma-separated value. NULL NA values removed, lists flattened.","code":""},{"path":"https://jonthegeek.github.io/nectar/reference/to_csv_scalar.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Coerce to comma-separated scalar — to_csv_scalar","text":"","code":"to_csv_scalar(...)"},{"path":"https://jonthegeek.github.io/nectar/reference/to_csv_scalar.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Coerce to comma-separated scalar — to_csv_scalar","text":"... One character vectors (things can coerced/flattened character vectors) collapse.","code":""},{"path":"https://jonthegeek.github.io/nectar/reference/to_csv_scalar.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Coerce to comma-separated scalar — to_csv_scalar","text":"character scalar like \",\".","code":""},{"path":"https://jonthegeek.github.io/nectar/reference/to_csv_scalar.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Coerce to comma-separated scalar — to_csv_scalar","text":"","code":"to_csv_scalar(letters) #> [1] \"a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z\" to_csv_scalar(NA, \"a\", list(a = NULL, b = \"b\"), \"c\") #> [1] \"a,b,c\""}]
